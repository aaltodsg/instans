- Make methods for testing
  + Success/failure handling
  + Make parsing method
  - Make running method
    + Bind default graph input processor for running
    - Bind named graph input processor for running
      - Needs new code in interpreter: Named graph input processor may have to be created at run time. How?
    + Bind SELECT output processor for running
    + Bind CONSTRUCT output processor for running
    - Bind different graph output processors
      - Needs new code in interpreter: Named graph output processor may have to be create at run time. How?
  - Make comparison method
    - Comparing SELECT results with expected results in different formats
    - Comparing default graph in TTL
    - Comparing named graphs in TTL

------------------------------------------
LATER
- Try to get fuseki working
- Add automatic modification datetime changing to Lisp source files
New kind of index:
- The tokens are indexed based on mandatory and optional bindings.
  When you add a token, it is stored using the mandatory bindings as the primary key.
  The optional bindings then form secondary keys. If there are many optional bindings,
  it may be useful to just use them as a filter, not for actual indexing (combinatorial
  explosion with multiple optionals).
- You can query the index by giving a set of bindings, that contains all the mandatory
  and any number of optional bindings. The tokens matching the mandatory bindings are fetched.
  These are filtered using the optional bindings.
- Question: how do we make the hash keys for indexing? Are the mandatory bindings always in the same order?
- Question: how do we know that a binding is optional?
  Answer: 1) It is inside the second parameter of a LEFTJOIN construct and does not appear in the first parameter.
          2) It is inside one parameter of a UNION and does not apperar in the other parameter.

------------------------------------------







------------------------------------------
DONE
------------------------------------------
+ Find out method combination for failure-p method
+ Categorize tests
  + Print alist from csv
  + Abstract field data
  + Combine rows with similar field data
  + Detect required test classes
+ Create a script that runs that SPARQL test
+ Create a new SPAQRL query to get the necessary fields of a test
+ Add option for ignoring printint prefixes, when using prefix encoding
+ Add prefix encoding to SELECT results
+ Create a runner script for the query
+ Fix bug in sparql-tests.lisp
+ Find out all prefixes in manifest.files
  + script
+ Find out all predicates in manifest files.
  - Create a query for a single manifest.ttl file
  + Result: predicate
