BASE <http://instans.org/>
PREFIX : <http:instans.org/default#>
PREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>
PREFIX ssn: <http://purl.oclc.org/NET/ssnx/ssn#>
PREFIX ep: <http://www.ontologydesignpatterns.org/cp/owl/eventprocessing.owl#>
PREFIX omgeo: <http://www.ontotext.com/owlim/geo#>
PREFIX ff: <http://factforge.net/>

# Enrich (EPA 3): Enrich events with the name of the closest location
# SERVICE-query replaced with BIND ( "Espoo" as ?label ) to avoid external lookup delay
# and because SERVICE is not yet implemented in INSTANS

PREFIX omgeo: <http://www.ontotext.com/owlim/geo#>
PREFIX ff: <http://factforge.net/>

# @name EPA3-Enrich
INSERT { GRAPH <translated> { 
    ?event a ep:EventObject ; # Forward enriched event
         ssn:Sensor ?sensor ;
         geo:Point [ geo:lat ?lat ; geo:long ?long ; ] ;
         ep:hasEventObjectSamplingTime ?time ;
         :locationName ?label } }
WHERE { GRAPH <poststateful> { 
    ?event a ep:EventObject ; # Match incoming event
           ssn:Sensor ?sensor ;
           geo:Point [ geo:lat ?lat ; geo:long ?long ; ] ;
           ep:hasEventObjectSamplingTime ?time .
     BIND ( "Espoo" as ?label ) # Temporary replacement until SERVICE implemented
#    SERVICE <http://factforge.net/sparql> { # Retrieve location label
#       ?location omgeo:nearby(?lat ?long "1km"); 
#                 ff:preferredLabel ?label }
} } ; 

# Cleanup <poststateful> when a newer event is available

# @name Cleanup-Poststateful
# DELETE {
#   GRAPH <poststateful> {
#     ?event1 a ep:EventObject ; # Match incoming event
#             ssn:Sensor ?sensor ;
#             ep:hasEventObjectSamplingTime ?time1 ;
#             geo:Point ?point .
#     ?point geo:lat ?lat ; geo:long ?long .
#   }
# }
# WHERE {
#   GRAPH <poststateful> {
#     ?event1 a ep:EventObject ; # Match incoming event
#             ssn:Sensor ?sensor ;
#             ep:hasEventObjectSamplingTime ?time1 ;
#             geo:Point ?point .
#     ?point geo:lat ?lat ; geo:long ?long .
#   }
#   FILTER EXISTS { GRAPH <poststateful> {
#       ?event2 a ep:EventObject ;
#               ep:hasEventObjectSamplingTime ?time2 .
#       FILTER (?time1 < ?time2)
#   }  }
# } ;
