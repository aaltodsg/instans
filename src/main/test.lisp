;;; -*- Mode: Lisp; Syntax: COMMON-LISP; Base: 10; Package: INSTANS -*-
;;;
;;; Author: Esko Nuutila (esko.nuutila@aalto.fi)
;;;

(in-package #:instans)

(defun test-dirs (test-set)
  (unless (member test-set '(:r2 :sparql11))
    (error* "Unknown test set ~A" test-set))
  (directory (format nil "~A/tests/data-~A/*/" (namestring (find-instans-root-directory)) (string-downcase (string test-set)))))

(defun manifests (test-set)
  (mapcan #'(lambda (d) (directory (format nil "~A/manifest.ttl" (namestring d)))) (test-dirs test-set)))

(defun manifest-tests (manifest &optional (query (concatenate 'string (namestring (find-instans-root-directory)) "tests/input/syntax-test.rq")))
  (let* ((base (format nil "file://~A" (directory-namestring (truename manifest))))
	 (instans (main (format nil "--select-output-type solution-set -b ~A -r ~A -t ~A" base query manifest)))
	 (p (instans-select-output-processor instans)))
    (declare (ignorable p))
    nil))

(defun manifest-tests-pretty (kind &optional query)
  (let ((root (namestring (find-instans-root-directory))))
    (multiple-value-bind (manifest default-query)
	(case kind
	  ((:ttl :turtle)
	   (values (format nil "~A/tests/RDF/TurtleTests/manifest.ttl" root) (format nil "~A/tests/input/trig-test-runner.rq" root)))
	  (:trig
	   (values (format nil "~A/tests/RDF/TrigTests/manifest.ttl" root) (format nil "~A/tests/input/trig-test-runner.rq" root)))
	  ((:nt :ntriples)
	   (values (format nil "~A/tests/RDF/N-TriplesTests/manifest.ttl" root) (format nil "~A/tests/input/n-quads-test-runner.rq" root)))
	  ((:nq :nquads)
	   (values (format nil "~A/tests/RDF/N-QuadsTests/manifest.ttl" root) (format nil "~A/tests/input/n-quads-test-runner.rq" root)))
	  (t (error* "Illegal kind ~A" kind)))
      (multiple-value-bind (variables bindings)
	  (manifest-tests manifest (or query default-query))
	(inform "~{~A~^,~}:" variables) (loop for x in bindings do (inform "~{~A~^,~}" x))))))

(defvar *r2-dirs*)
(defvar *sparql11-dirs*)
(defvar *all-dirs*)
(defvar *r2-manifests*)
(defvar *sparql11-manifests*)
(defvar *all-manifests*)
(defvar *trig-iof*)
(defvar *turtle-iof*)

(defun trig-iof (&optional (root "/Users/enu/instans/instans/tests/RDF/TrigTests"))
  (loop for (input output) in 
       (list
	(list "anonymous_blank_node_graph.trig" "labeled_blank_node_graph.nq")
	(list "labeled_blank_node_graph.trig" "labeled_blank_node_graph.nq")
	(list "alternating_iri_graphs.trig" "alternating_iri_graphs.nq")
	(list "alternating_bnode_graphs.trig" "alternating_bnode_graphs.nq")
	(list "IRI_subject.trig" "IRI_spo.nq")
	(list "IRI_with_four_digit_numeric_escape.trig" "IRI_spo.nq")
	(list "IRI_with_eight_digit_numeric_escape.trig" "IRI_spo.nq")
	(list "IRI_with_all_punctuation.trig" "IRI_with_all_punctuation.nq")
	(list "bareword_a_predicate.trig" "bareword_a_predicate.nq")
	(list "old_style_prefix.trig" "IRI_spo.nq")
	(list "SPARQL_style_prefix.trig" "IRI_spo.nq")
	(list "prefixed_IRI_predicate.trig" "IRI_spo.nq")
	(list "prefixed_IRI_object.trig" "IRI_spo.nq")
	(list "prefix_only_IRI.trig" "IRI_spo.nq")
	(list "prefix_with_PN_CHARS_BASE_character_boundaries.trig" "IRI_spo.nq")
	(list "prefix_with_non_leading_extras.trig" "IRI_spo.nq")
	(list "localName_with_assigned_nfc_bmp_PN_CHARS_BASE_character_boundaries.trig" "localName_with_assigned_nfc_bmp_PN_CHARS_BASE_character_boundaries.nq")
	(list "localName_with_assigned_nfc_PN_CHARS_BASE_character_boundaries.trig" "localName_with_assigned_nfc_PN_CHARS_BASE_character_boundaries.nq")
	(list "localName_with_nfc_PN_CHARS_BASE_character_boundaries.trig" "localName_with_nfc_PN_CHARS_BASE_character_boundaries.nq")
	(list "default_namespace_IRI.trig" "IRI_spo.nq")
	(list "prefix_reassigned_and_used.trig" "prefix_reassigned_and_used.nq")
	(list "reserved_escaped_localName.trig" "reserved_escaped_localName.nq")
	(list "percent_escaped_localName.trig" "percent_escaped_localName.nq")
	(list "HYPHEN_MINUS_in_localName.trig" "HYPHEN_MINUS_in_localName.nq")
	(list "underscore_in_localName.trig" "underscore_in_localName.nq")
	(list "localname_with_COLON.trig" "localname_with_COLON.nq")
	(list "localName_with_leading_underscore.trig" "localName_with_leading_underscore.nq")
	(list "localName_with_leading_digit.trig" "localName_with_leading_digit.nq")
	(list "localName_with_non_leading_extras.trig" "localName_with_non_leading_extras.nq")
	(list "old_style_base.trig" "IRI_spo.nq")
	(list "SPARQL_style_base.trig" "IRI_spo.nq")
	(list "labeled_blank_node_subject.trig" "labeled_blank_node_subject.nq")
	(list "labeled_blank_node_object.trig" "labeled_blank_node_object.nq")
	(list "labeled_blank_node_with_PN_CHARS_BASE_character_boundaries.trig" "labeled_blank_node_object.nq")
	(list "labeled_blank_node_with_leading_underscore.trig" "labeled_blank_node_object.nq")
	(list "labeled_blank_node_with_leading_digit.trig" "labeled_blank_node_object.nq")
	(list "labeled_blank_node_with_non_leading_extras.trig" "labeled_blank_node_object.nq")
	(list "anonymous_blank_node_subject.trig" "anonymous_blank_node_subject.nq")
	(list "anonymous_blank_node_object.trig" "anonymous_blank_node_object.nq")
	(list "sole_blankNodePropertyList.trig" "sole_blankNodePropertyList.nq")
	(list "blankNodePropertyList_as_subject.trig" "blankNodePropertyList_as_subject.nq")
	(list "blankNodePropertyList_as_object.trig" "blankNodePropertyList_as_object.nq")
	(list "blankNodePropertyList_with_multiple_triples.trig" "blankNodePropertyList_with_multiple_triples.nq")
	(list "nested_blankNodePropertyLists.trig" "nested_blankNodePropertyLists.nq")
	(list "blankNodePropertyList_containing_collection.trig" "blankNodePropertyList_containing_collection.nq")
	(list "collection_subject.trig" "collection_subject.nq")
	(list "collection_object.trig" "collection_object.nq")
	(list "empty_collection.trig" "empty_collection.nq")
	(list "nested_collection.trig" "nested_collection.nq")
	(list "first.trig" "first.nq")
	(list "last.trig" "last.nq")
	(list "LITERAL1.trig" "LITERAL1.nq")
	(list "LITERAL1_ascii_boundaries.trig" "LITERAL1_ascii_boundaries.nq")
	(list "LITERAL1_with_UTF8_boundaries.trig" "LITERAL_with_UTF8_boundaries.nq")
	(list "LITERAL1_all_controls.trig" "LITERAL1_all_controls.nq")
	(list "LITERAL1_all_punctuation.trig" "LITERAL1_all_punctuation.nq")
	(list "LITERAL_LONG1.trig" "LITERAL1.nq")
	(list "LITERAL_LONG1_ascii_boundaries.trig" "LITERAL_LONG1_ascii_boundaries.nq")
	(list "LITERAL_LONG1_with_UTF8_boundaries.trig" "LITERAL_with_UTF8_boundaries.nq")
	(list "LITERAL_LONG1_with_1_squote.trig" "LITERAL_LONG1_with_1_squote.nq")
	(list "LITERAL_LONG1_with_2_squotes.trig" "LITERAL_LONG1_with_2_squotes.nq")
	(list "LITERAL2.trig" "LITERAL1.nq")
	(list "LITERAL2_ascii_boundaries.trig" "LITERAL2_ascii_boundaries.nq")
	(list "LITERAL2_with_UTF8_boundaries.trig" "LITERAL_with_UTF8_boundaries.nq")
	(list "LITERAL_LONG2.trig" "LITERAL1.nq")
	(list "LITERAL_LONG2_ascii_boundaries.trig" "LITERAL_LONG2_ascii_boundaries.nq")
	(list "LITERAL_LONG2_with_UTF8_boundaries.trig" "LITERAL_with_UTF8_boundaries.nq")
	(list "LITERAL_LONG2_with_1_squote.trig" "LITERAL_LONG2_with_1_squote.nq")
	(list "LITERAL_LONG2_with_2_squotes.trig" "LITERAL_LONG2_with_2_squotes.nq")
	(list "literal_with_CHARACTER_TABULATION.trig" "literal_with_CHARACTER_TABULATION.nq")
	(list "literal_with_BACKSPACE.trig" "literal_with_BACKSPACE.nq")
	(list "literal_with_LINE_FEED.trig" "literal_with_LINE_FEED.nq")
	(list "literal_with_CARRIAGE_RETURN.trig" "literal_with_CARRIAGE_RETURN.nq")
	(list "literal_with_FORM_FEED.trig" "literal_with_FORM_FEED.nq")
	(list "literal_with_REVERSE_SOLIDUS.trig" "literal_with_REVERSE_SOLIDUS.nq")
	(list "literal_with_escaped_CHARACTER_TABULATION.trig" "literal_with_CHARACTER_TABULATION.nq")
	(list "literal_with_escaped_BACKSPACE.trig" "literal_with_BACKSPACE.nq")
	(list "literal_with_escaped_LINE_FEED.trig" "literal_with_LINE_FEED.nq")
	(list "literal_with_escaped_CARRIAGE_RETURN.trig" "literal_with_CARRIAGE_RETURN.nq")
	(list "literal_with_escaped_FORM_FEED.trig" "literal_with_FORM_FEED.nq")
	(list "literal_with_numeric_escape4.trig" "literal_with_numeric_escape4.nq")
	(list "literal_with_numeric_escape8.trig" "literal_with_numeric_escape4.nq")
	(list "IRIREF_datatype.trig" "IRIREF_datatype.nq")
	(list "prefixed_name_datatype.trig" "IRIREF_datatype.nq")
	(list "bareword_integer.trig" "IRIREF_datatype.nq")
	(list "bareword_decimal.trig" "bareword_decimal.nq")
	(list "bareword_double.trig" "bareword_double.nq")
	(list "double_lower_case_e.trig" "double_lower_case_e.nq")
	(list "negative_numeric.trig" "negative_numeric.nq")
	(list "positive_numeric.trig" "positive_numeric.nq")
	(list "numeric_with_leading_0.trig" "numeric_with_leading_0.nq")
	(list "literal_true.trig" "literal_true.nq")
	(list "literal_false.trig" "literal_false.nq")
	(list "langtagged_non_LONG.trig" "langtagged_non_LONG.nq")
	(list "langtagged_LONG.trig" "langtagged_non_LONG.nq")
	(list "lantag_with_subtag.trig" "lantag_with_subtag.nq")
	(list "objectList_with_two_objects.trig" "objectList_with_two_objects.nq")
	(list "predicateObjectList_with_two_objectLists.trig" "predicateObjectList_with_two_objectLists.nq")
	(list "repeated_semis_at_end.trig" "predicateObjectList_with_two_objectLists.nq")
	(list "repeated_semis_not_at_end.trig" "repeated_semis_not_at_end.nq")
	(list "trig-eval-struct-01.trig" "trig-eval-struct-01.nq")
	(list "trig-eval-struct-02.trig" "trig-eval-struct-02.nq")
	(list "trig-subm-01.trig" "trig-subm-01.nq")
	(list "trig-subm-02.trig" "trig-subm-02.nq")
	(list "trig-subm-03.trig" "trig-subm-03.nq")
	(list "trig-subm-04.trig" "trig-subm-04.nq")
	(list "trig-subm-05.trig" "trig-subm-05.nq")
	(list "trig-subm-06.trig" "trig-subm-06.nq")
	(list "trig-subm-07.trig" "trig-subm-07.nq")
	(list "trig-subm-08.trig" "trig-subm-08.nq")
	(list "trig-subm-09.trig" "trig-subm-09.nq")
	(list "trig-subm-10.trig" "trig-subm-10.nq")
	(list "trig-subm-11.trig" "trig-subm-11.nq")
	(list "trig-subm-12.trig" "trig-subm-12.nq")
	(list "trig-subm-13.trig" "trig-subm-13.nq")
	(list "trig-subm-14.trig" "trig-subm-14.nq")
	(list "trig-subm-15.trig" "trig-subm-15.nq")
	(list "trig-subm-16.trig" "trig-subm-16.nq")
	(list "trig-subm-17.trig" "trig-subm-17.nq")
	(list "trig-subm-18.trig" "trig-subm-18.nq")
	(list "trig-subm-19.trig" "trig-subm-19.nq")
	(list "trig-subm-20.trig" "trig-subm-20.nq")
	(list "trig-subm-21.trig" "trig-subm-21.nq")
	(list "trig-subm-22.trig" "trig-subm-22.nq")
	(list "trig-subm-23.trig" "trig-subm-23.nq")
	(list "trig-subm-24.trig" "trig-subm-24.nq")
	(list "trig-subm-25.trig" "trig-subm-25.nq")
	(list "trig-subm-26.trig" "trig-subm-26.nq")
	(list "trig-subm-27.trig" "trig-subm-27.nq")
	(list "comment_following_localName.trig" "IRI_spo.nq")
	(list "number_sign_following_localName.trig" "number_sign_following_localName.nq")
	(list "comment_following_PNAME_NS.trig" "comment_following_PNAME_NS.nq")
	(list "number_sign_following_PNAME_NS.trig" "number_sign_following_PNAME_NS.nq")
	(list "LITERAL_LONG2_with_REVERSE_SOLIDUS.trig" "LITERAL_LONG2_with_REVERSE_SOLIDUS.nq")
	(list "two_LITERAL_LONG2s.trig" "two_LITERAL_LONG2s.nq")
	(list "langtagged_LONG_with_subtag.trig" "langtagged_LONG_with_subtag.nq"))
	collect (list (parse-iri (format nil "file://~A/~A" root input)) (parse-iri (format nil "file://~A/~A" root output)))))

(defun turtle-iof (&optional (root "/Users/enu/instans/instans/tests/RDF/TurtleTests"))
  (loop for (input output) in 
       (list
	(list "IRI_subject.ttl" "IRI_spo.nt")
	(list "IRI_with_four_digit_numeric_escape.ttl" "IRI_spo.nt")
	(list "IRI_with_eight_digit_numeric_escape.ttl" "IRI_spo.nt")
	(list "IRI_with_all_punctuation.ttl" "IRI_with_all_punctuation.nt")
	(list "bareword_a_predicate.ttl" "bareword_a_predicate.nt")
	(list "old_style_prefix.ttl" "IRI_spo.nt")
	(list "SPARQL_style_prefix.ttl" "IRI_spo.nt")
	(list "prefixed_IRI_predicate.ttl" "IRI_spo.nt")
	(list "prefixed_IRI_object.ttl" "IRI_spo.nt")
	(list "prefix_only_IRI.ttl" "IRI_spo.nt")
	(list "prefix_with_PN_CHARS_BASE_character_boundaries.ttl" "IRI_spo.nt")
	(list "prefix_with_non_leading_extras.ttl" "IRI_spo.nt")
	(list "localName_with_assigned_nfc_bmp_PN_CHARS_BASE_character_boundaries.ttl" "localName_with_assigned_nfc_bmp_PN_CHARS_BASE_character_boundaries.nt")
	(list "localName_with_assigned_nfc_PN_CHARS_BASE_character_boundaries.ttl" "localName_with_assigned_nfc_PN_CHARS_BASE_character_boundaries.nt")
	(list "localName_with_nfc_PN_CHARS_BASE_character_boundaries.ttl" "localName_with_nfc_PN_CHARS_BASE_character_boundaries.nt")
	(list "default_namespace_IRI.ttl" "IRI_spo.nt")
	(list "prefix_reassigned_and_used.ttl" "prefix_reassigned_and_used.nt")
	(list "reserved_escaped_localName.ttl" "reserved_escaped_localName.nt")
	(list "percent_escaped_localName.ttl" "percent_escaped_localName.nt")
	(list "HYPHEN_MINUS_in_localName.ttl" "HYPHEN_MINUS_in_localName.nt")
	(list "underscore_in_localName.ttl" "underscore_in_localName.nt")
	(list "localname_with_COLON.ttl" "localname_with_COLON.nt")
	(list "localName_with_leading_underscore.ttl" "localName_with_leading_underscore.nt")
	(list "localName_with_leading_digit.ttl" "localName_with_leading_digit.nt")
	(list "localName_with_non_leading_extras.ttl" "localName_with_non_leading_extras.nt")
	(list "old_style_base.ttl" "IRI_spo.nt")
	(list "SPARQL_style_base.ttl" "IRI_spo.nt")
	(list "labeled_blank_node_subject.ttl" "labeled_blank_node_subject.nt")
	(list "labeled_blank_node_object.ttl" "labeled_blank_node_object.nt")
	(list "labeled_blank_node_with_PN_CHARS_BASE_character_boundaries.ttl" "labeled_blank_node_object.nt")
	(list "labeled_blank_node_with_leading_underscore.ttl" "labeled_blank_node_object.nt")
	(list "labeled_blank_node_with_leading_digit.ttl" "labeled_blank_node_object.nt")
	(list "labeled_blank_node_with_non_leading_extras.ttl" "labeled_blank_node_object.nt")
	(list "anonymous_blank_node_subject.ttl" "labeled_blank_node_subject.nt")
	(list "anonymous_blank_node_object.ttl" "labeled_blank_node_object.nt")
	(list "sole_blankNodePropertyList.ttl" "labeled_blank_node_subject.nt")
	(list "blankNodePropertyList_as_subject.ttl" "blankNodePropertyList_as_subject.nt")
	(list "blankNodePropertyList_as_object.ttl" "blankNodePropertyList_as_object.nt")
	(list "blankNodePropertyList_with_multiple_triples.ttl" "blankNodePropertyList_with_multiple_triples.nt")
	(list "nested_blankNodePropertyLists.ttl" "nested_blankNodePropertyLists.nt")
	(list "blankNodePropertyList_containing_collection.ttl" "blankNodePropertyList_containing_collection.nt")
	(list "collection_subject.ttl" "collection_subject.nt")
	(list "collection_object.ttl" "collection_object.nt")
	(list "empty_collection.ttl" "empty_collection.nt")
	(list "nested_collection.ttl" "nested_collection.nt")
	(list "first.ttl" "first.nt")
	(list "last.ttl" "last.nt")
	(list "LITERAL1.ttl" "LITERAL1.nt")
	(list "LITERAL1_ascii_boundaries.ttl" "LITERAL1_ascii_boundaries.nt")
	(list "LITERAL1_with_UTF8_boundaries.ttl" "LITERAL_with_UTF8_boundaries.nt")
	(list "LITERAL1_all_controls.ttl" "LITERAL1_all_controls.nt")
	(list "LITERAL1_all_punctuation.ttl" "LITERAL1_all_punctuation.nt")
	(list "LITERAL_LONG1.ttl" "LITERAL1.nt")
	(list "LITERAL_LONG1_ascii_boundaries.ttl" "LITERAL_LONG1_ascii_boundaries.nt")
	(list "LITERAL_LONG1_with_UTF8_boundaries.ttl" "LITERAL_with_UTF8_boundaries.nt")
	(list "LITERAL_LONG1_with_1_squote.ttl" "LITERAL_LONG1_with_1_squote.nt")
	(list "LITERAL_LONG1_with_2_squotes.ttl" "LITERAL_LONG1_with_2_squotes.nt")
	(list "LITERAL2.ttl" "LITERAL1.nt")
	(list "LITERAL2_ascii_boundaries.ttl" "LITERAL2_ascii_boundaries.nt")
	(list "LITERAL2_with_UTF8_boundaries.ttl" "LITERAL_with_UTF8_boundaries.nt")
	(list "LITERAL_LONG2.ttl" "LITERAL1.nt")
	(list "LITERAL_LONG2_ascii_boundaries.ttl" "LITERAL_LONG2_ascii_boundaries.nt")
	(list "LITERAL_LONG2_with_UTF8_boundaries.ttl" "LITERAL_with_UTF8_boundaries.nt")
	(list "LITERAL_LONG2_with_1_squote.ttl" "LITERAL_LONG2_with_1_squote.nt")
	(list "LITERAL_LONG2_with_2_squotes.ttl" "LITERAL_LONG2_with_2_squotes.nt")
	(list "literal_with_CHARACTER_TABULATION.ttl" "literal_with_CHARACTER_TABULATION.nt")
	(list "literal_with_BACKSPACE.ttl" "literal_with_BACKSPACE.nt")
	(list "literal_with_LINE_FEED.ttl" "literal_with_LINE_FEED.nt")
	(list "literal_with_CARRIAGE_RETURN.ttl" "literal_with_CARRIAGE_RETURN.nt")
	(list "literal_with_FORM_FEED.ttl" "literal_with_FORM_FEED.nt")
	(list "literal_with_REVERSE_SOLIDUS.ttl" "literal_with_REVERSE_SOLIDUS.nt")
	(list "literal_with_escaped_CHARACTER_TABULATION.ttl" "literal_with_CHARACTER_TABULATION.nt")
	(list "literal_with_escaped_BACKSPACE.ttl" "literal_with_BACKSPACE.nt")
	(list "literal_with_escaped_LINE_FEED.ttl" "literal_with_LINE_FEED.nt")
	(list "literal_with_escaped_CARRIAGE_RETURN.ttl" "literal_with_CARRIAGE_RETURN.nt")
	(list "literal_with_escaped_FORM_FEED.ttl" "literal_with_FORM_FEED.nt")
	(list "literal_with_numeric_escape4.ttl" "literal_with_numeric_escape4.nt")
	(list "literal_with_numeric_escape8.ttl" "literal_with_numeric_escape4.nt")
	(list "IRIREF_datatype.ttl" "IRIREF_datatype.nt")
	(list "prefixed_name_datatype.ttl" "IRIREF_datatype.nt")
	(list "bareword_integer.ttl" "IRIREF_datatype.nt")
	(list "bareword_decimal.ttl" "bareword_decimal.nt")
	(list "bareword_double.ttl" "bareword_double.nt")
	(list "double_lower_case_e.ttl" "double_lower_case_e.nt")
	(list "negative_numeric.ttl" "negative_numeric.nt")
	(list "positive_numeric.ttl" "positive_numeric.nt")
	(list "numeric_with_leading_0.ttl" "numeric_with_leading_0.nt")
	(list "literal_true.ttl" "literal_true.nt")
	(list "literal_false.ttl" "literal_false.nt")
	(list "langtagged_non_LONG.ttl" "langtagged_non_LONG.nt")
	(list "langtagged_LONG.ttl" "langtagged_non_LONG.nt")
	(list "lantag_with_subtag.ttl" "lantag_with_subtag.nt")
	(list "objectList_with_two_objects.ttl" "objectList_with_two_objects.nt")
	(list "predicateObjectList_with_two_objectLists.ttl" "predicateObjectList_with_two_objectLists.nt")
	(list "repeated_semis_at_end.ttl" "predicateObjectList_with_two_objectLists.nt")
	(list "repeated_semis_not_at_end.ttl" "repeated_semis_not_at_end.nt")
	(list "turtle-eval-struct-01.ttl" "turtle-eval-struct-01.nt")
	(list "turtle-eval-struct-02.ttl" "turtle-eval-struct-02.nt")
	(list "turtle-subm-01.ttl" "turtle-subm-01.nt")
	(list "turtle-subm-02.ttl" "turtle-subm-02.nt")
	(list "turtle-subm-03.ttl" "turtle-subm-03.nt")
	(list "turtle-subm-04.ttl" "turtle-subm-04.nt")
	(list "turtle-subm-05.ttl" "turtle-subm-05.nt")
	(list "turtle-subm-06.ttl" "turtle-subm-06.nt")
	(list "turtle-subm-07.ttl" "turtle-subm-07.nt")
	(list "turtle-subm-08.ttl" "turtle-subm-08.nt")
	(list "turtle-subm-09.ttl" "turtle-subm-09.nt")
	(list "turtle-subm-10.ttl" "turtle-subm-10.nt")
	(list "turtle-subm-11.ttl" "turtle-subm-11.nt")
	(list "turtle-subm-12.ttl" "turtle-subm-12.nt")
	(list "turtle-subm-13.ttl" "turtle-subm-13.nt")
	(list "turtle-subm-14.ttl" "turtle-subm-14.nt")
	(list "turtle-subm-15.ttl" "turtle-subm-15.nt")
	(list "turtle-subm-16.ttl" "turtle-subm-16.nt")
	(list "turtle-subm-17.ttl" "turtle-subm-17.nt")
	(list "turtle-subm-18.ttl" "turtle-subm-18.nt")
	(list "turtle-subm-19.ttl" "turtle-subm-19.nt")
	(list "turtle-subm-20.ttl" "turtle-subm-20.nt")
	(list "turtle-subm-21.ttl" "turtle-subm-21.nt")
	(list "turtle-subm-22.ttl" "turtle-subm-22.nt")
	(list "turtle-subm-23.ttl" "turtle-subm-23.nt")
	(list "turtle-subm-24.ttl" "turtle-subm-24.nt")
	(list "turtle-subm-25.ttl" "turtle-subm-25.nt")
	(list "turtle-subm-26.ttl" "turtle-subm-26.nt")
	(list "turtle-subm-27.ttl" "turtle-subm-27.nt")
	(list "comment_following_localName.ttl" "IRI_spo.nt")
	(list "number_sign_following_localName.ttl" "number_sign_following_localName.nt")
	(list "comment_following_PNAME_NS.ttl" "comment_following_PNAME_NS.nt")
	(list "number_sign_following_PNAME_NS.ttl" "number_sign_following_PNAME_NS.nt")
	(list "LITERAL_LONG2_with_REVERSE_SOLIDUS.ttl" "LITERAL_LONG2_with_REVERSE_SOLIDUS.nt")
	(list "two_LITERAL_LONG2s.ttl" "two_LITERAL_LONG2s.nt")
	(list "langtagged_LONG_with_subtag.ttl" "langtagged_LONG_with_subtag.nt"))
	collect (list (parse-iri (format nil "file://~A/~A" root input)) (parse-iri (format nil "file://~A/~A" root output)))))

(defun test-init ()
  (setf *r2-dirs* (test-dirs :r2))
  (setf *sparql11-dirs* (test-dirs :sparql11))
  (setf *all-dirs* (append *r2-dirs* *sparql11-dirs*))
  (setf *r2-manifests* (manifests :r2))
  (setf *sparql11-manifests* (manifests  :sparql11))
  (setf *all-manifests* (append *r2-manifests* *sparql11-manifests*))
  (setf *trig-iof* (trig-iof))
  (setf *turtle-iof* (turtle-iof)))

(defun test-counts (&rest args)
  (flet ((testlist (name list)
	   (inform "~A:" name)
	   (loop for m in list for nvals = (length (second (multiple-value-list (apply #'manifest-tests m args))))
	      do (inform "~2d tests in ~A" nvals m) sum nvals into count finally (inform "~4D tests" count))))
    (testlist "DATA-R2" *r2-manifests*)
    (testlist "DATA-SPARQL11" *sparql11-manifests*)))

(defun test-files (&rest args)
  (flet ((testlist (name list)
	   (inform "~A:" name)
	   (loop for m in list for solution = (multiple-value-list (apply #'manifest-tests m args))
	      for vars = (first solution)
	      for results = (second solution)
	      for nvals = (length results)
	      do (inform "~2d tests in ~A:" nvals m)
	      do (loop for result in results do (inform "~{  ~{~12A: ~A~}~^~%~}" (mapcar #'list vars result))
		      when (and (second result) (not (third result))) do (inform "!!!"))
	      sum nvals into count finally (inform "~4D tests" count))))
    (testlist "DATA-R2" *r2-manifests*)
    (testlist "DATA-SPARQL11" *sparql11-manifests*)))

(defun issue-test (n htmlp)
  (let* ((rootdir (namestring (find-instans-root-directory)))
	 (dir (format nil "~A/tests/input/issues" rootdir))
	 (file-base (format nil "~A/issue~A" dir n))
	 (sh-file (format nil "~A.sh" file-base))
	 (sh-string (with-open-file (str sh-file) (read-line str)))
	 (args (format nil "~A-d file://~A/ ~A"
		       (if htmlp (format nil "--rete-html-file ~A/tests/output " rootdir) "")
		       dir (subseq sh-string (+ (search "instans " sh-string) 8)))))
    (inform "Running issue test ~A with args ~A" n args)
    (main args)))

(defun ttt (n type)
  (multiple-value-bind (manifest-http-root-dir items)
      (if (eq type :trig) (values "http://www.w3.org/2013/TriGTests/" *trig-iof*) (values "http://www.w3.org/2013/TurtleTests/" *turtle-iof*))
    (let* ((item (nth n items))
	   (input1-file-iri (first item))
	   (input1-path (pathname (rdf-iri-path input1-file-iri)))
	   (input1-filename (format nil "~A.~A" (pathname-name input1-path) (pathname-type input1-path)))
	   ;; (input2-file-iri (second item))
	   ;; (input2-path (pathname (rdf-iri-path input2-file-iri)))
	   ;; (input2-filename (format nil "~A.~A" (pathname-name input2-path) (pathname-type input2-path)))
	   )
;      (inform "~S vs. ~S" (first-item)) 
      (funcall #'instans-compare-rdf-files (create-instans (parse-iri "test")) (first item) (second item)
	       :base (parse-iri (format nil "~A~A" manifest-http-root-dir input1-filename))))))

(defun ttt-all (type)
  (loop with items = (if (eq type :trig) *trig-iof* *turtle-iof*)
	for i from 0 below (length items)
        unless (ttt i type) collect (list i (nth i items))))


(defun fulltest (dirname)
  (let ((base (format nil "file://~A" dirname))
	(manifest (format nil "~A/manifest.ttl" dirname))
	(query (format nil "~A/tests/input/testsuite.rq" (namestring (find-instans-root-directory)))))
;    (inform "")
    (cond ((probe-file manifest)
	   (inform "Directory ~A:~%~%" dirname)
	   (main (list "-b" base "-r" query "-t" manifest)))
	  (t
;	   (inform "No manifest.ttl in directory ~A" dirname)
))))
