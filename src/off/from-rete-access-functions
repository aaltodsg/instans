(defmethod initialize-instance :after ((this stream-query-output-processor-mixin) &key output-name &allow-other-keys)
;  (inform "initialize-instance :after ((this query-output-processor) &key output-name &allow-other-keys)")
  (let ((stream (cond ((or (null output-name) (string= "-" output-name))
;		       (inform "Using *standard-output* = ~S as output stream" *standard-output*)
		       *standard-output*)
		      (t
		       (open output-name :direction :output :if-exists :supersede)))))
;    (inform "stream = ~S" stream)
    (setf (query-output-processor-output-stream this) stream)))

(defmethod initialize-instance :after ((this csv-output-processor) &key &allow-other-keys)
;  (inform "initialize-instance :after ((this csv-output-processor) &key &allow-other-keys)")
  (setf (csv-output-processor-csv-output this)
	(make-instance 'csv-output :stream (query-output-processor-output-stream this))))

(defmethod initialize-instance :after ((this solution-set-output-processor) &key &allow-other-keys)
  (setf (solution-set-output-processor-query-results this) (make-instance 'sparql-query-results)))


(defun create-construct-output-processor (instans output-name output-type)
  (cond ((not *newio*)
	 (case output-type
	   ((:ttl :turtle)
	    (make-instance 'turtle-output-processor :output-name output-name))
	   (:trig (make-instance 'trig-output-processor :output-name output-name))
	   (:nt (make-instance 'nt-output-processor :output-name output-name))
	   (:nq 
	    (make-instance 'nq-output-processor :output-name output-name))
	   (:mbox (make-instance 'mailbox-output-processor :output-name output-name))
	   (t (error* "Unknown construct output processor type ~S" output-type))))
	(t
	 (create-construct-stream-output-processor instans output-name output-type))))

(defgeneric output-pending-graph (trig-output-processor)
  (:method ((this trig-output-processor))
    (when (trig-output-processor-batch-p this)
      (error* "Do not use output-pending-graph in batch mode!"))
    (let ((stream (query-output-processor-output-stream  this))
	  (indent 0)
	  (init-sep "")
;	  (indents nil)
	  )
      (labels ((incf-indent (n)
;		 (push indent indents)
		 (incf indent n))
	       (output-spol (triples init-sep)
		 (let ((trie nil))
		   (loop for (s p o) in triples
			 do (let ((s-item (assoc s trie :test #'sparql-value-equal)))
			      (cond ((null s-item)
				     (push (list s (list p o)) trie))
				    (t
				     (let ((p-item (assoc p (rest s-item) :test #'sparql-value-equal)))
				       (cond ((null p-item)
					      (push (list p o) (cdr s-item) ))
					     (t
					      (pushnew o (cdr p-item)))))))))
		   (loop for s-item in trie
			 for s-sep = init-sep then (format nil "~%~V@T" indent)
			 for s-string = (sparql-value-to-string (first s-item))
			 do (format stream "~A~A" s-sep s-string)
			 do (incf-indent (length s-string))
			 do (loop for p-sep = "" then (format nil ";~%~V@T" indent)
				  for p-item in (rest s-item)
				  for p-string = (sparql-value-to-string (first p-item))
				  do (format stream "~A ~A" p-sep p-string)
				  do (incf-indent (length p-string))
				  do (loop for o-sep = "" then (format nil ",~%~V@T" indent)
					   for o in (rest p-item) do (format stream "~A ~A" o-sep (sparql-value-to-string o)))
				  do (incf-indent (- (length p-string))))
			 do (incf-indent (- (length s-string)))
			 do (format stream " .~%"))))
	       (output-triples (triples init-sep)
		 (loop for triple in triples
		       for s-sep = init-sep then (format nil "~%~V@T" indent)
		       do (format stream "~A~A ~A ~A .~%" indent
				  (sparql-value-to-string (first triple)) (sparql-value-to-string (second triple)) (sparql-value-to-string (third triple))))))
	(let (g-string)
	  (when (trig-output-processor-current-graph this)
	    (setf g-string (sparql-value-to-string (trig-output-processor-current-graph this)))
	    (format stream "~%~A {" g-string)
	    (incf-indent (+ (length g-string) 3))
	    (setf init-sep " "))
	  (cond ((trig-output-processor-subject-predicate-object-list-form-p this)
		 (output-spol (trig-output-processor-quads/triples this) init-sep))
		(t
		 (output-triples (trig-output-processor-quads/triples this) init-sep)))
	  (when (trig-output-processor-current-graph this)
	    (incf-indent (- (+ (length g-string) 3)))
	    (format stream "}~%")
	    (setf init-sep "")))
	(setf (trig-output-processor-quads/triples this) nil))
;      (inform "~A" (reverse indents))
      )))
  
(defgeneric write-construct-output (query-output-processor instans s p o &optional g)
  (:method ((this rete-construct-output-processor) instans s p o &optional g)
    (declare (ignorable instans))
    (add-statement this s p o g))
  (:method ((this n-statement-output-processor) instans s p o &optional g)
    (let ((stream (query-output-processor-output-stream  this)))
      (if g
	  (format stream "~A ~A ~A ~A .~%"
		  (sparql-value-to-string s) (sparql-value-to-string p) (sparql-value-to-string o) (sparql-value-to-string g))
	  (format stream "~A ~A ~A .~%"
		  (sparql-value-to-string s) (sparql-value-to-string p) (sparql-value-to-string o)))))
  (:method ((this turtle-output-processor) instans s p o &optional g)
    (when g (error* "Cannot produce Turtle output in a CONSTRUCT with named graphs. Use TriG instead"))
    (tail-insert (list s p o) this trig-output-processor-quads/triples trig-output-processor-quads/triples-tail))
  (:method ((this trig-output-processor) instans s p o &optional g)
    (cond ((trig-output-processor-batch-p this)
	   (tail-insert (list s p o g) this trig-output-processor-quads/triples trig-output-processor-quads/triples-tail))
	  (t
	   (cond ((eq (trig-output-processor-current-graph this) g)
		  (tail-insert (list s p o) this trig-output-processor-quads/triples trig-output-processor-quads/triples-tail))
		 (t
		  (output-pending-graph this)
		  (setf (trig-output-processor-current-graph this) g))))))
  (:method ((this mailbox-output-processor) instans s p o &optional g)
    (loop for mailbox in (mailbox-output-processor-mailboxes this)
  	  do (sb-concurrency:send-message mailbox (list s p o g)))))
(defgeneric flush-output-processor (query-output-processor)
  (:method ((this construct-output-processor))
    (flush-construct-output this))
  (:method ((this trig-output-processor))
    (output-pending-graph this))
  (:method ((this query-output-processor))
    nil))
