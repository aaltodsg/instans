NOTE!

This idea does not seem to work. The problem is that we have lisp forms that contain sparql variables, rdf literals, etc. inside. Now if the latter too are represented as lists, it may be difficult to reliably separate cases of actual forms from the sparql/rdf objects. This would require that all functions handling them have the consp test as their last element. Too risky.

Thus, I think we ditch this idea

==============================

Here we replace make all sparql data values simple lisp types, i.e., scalars, strings or structs with list type.

The goal is to make hashing easier, more correct and faster.

The following types of values are used in tokens (+ marks that this has been handled or was OK originally):

SCALARS:
+ (integer 0 4611686018427387903)
+ bit
+ boolean
+ double-float
+ fixnum
+ null
+ single-float
STRING:
+ string

OBJECTS:
- rdf-term:
  * Make a deftype rdf-term (or rdf-iri rdf-literal rdf-anonymous-blank-node rdf-named-blank-node sparql-unbound)
  + rdf-iri -> defstruct
  + rdf-literal -> defstruct
  - rdf-anonymous-blank-node
  - rdf-named-blank-node
  - sparql-unbound
Other:
- group
+ datetime
  * Transformed to defstruct, 586 tests OK

