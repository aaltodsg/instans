Here we implement reading and writing triples/quads as lisp expressions. You can read and write either single triples/quads or a block of them.

New files:
- parser/lisp-parser.lisp
  - make-lisp-parser

Old files affected:
+ instans.asd
  + Add parser/lisp-parser.lisp
+ rete/instans-io.lisp
  + Add define-class instans-lisp-input-processor (instans-stream-input-processor)
  + Add define-class instans-construct-stream-lisp-writer (instans-construct-stream-writer)
  + Add define-class instans-lisp-output-processor (instans-n-statement-output-processor)
  + Add define-class instans-lisp-block-output-processor (instans-trig-output-processor)
  + In create-construct-stream-output-processor, add :lisp as output type
  + In write-statements, add writing of lisp
- sparql/sparql-helper-functions.lisp
  + Add a function for lisp readable writing statements
+ main/main.lisp
  + In main, add new options for reading and writing lisp
+ main/compile-sparql-file.lisp
  + In instans-add-stream-input-processor, add :nl or :lbl as input type
? parser/parsers.lisp
  ? In make-rdf-parser, add lisp input

Test:
- Convert :trig to :nl, then :nl to :nl.
  - tests/input/passthrough.rq
  - Check fixpoint.
  - Make a lisp function, that parses a :nl input and a :triq input and checks that the triples are equal
- Convert :nt to :nl
- Convert :nl to :nt
- Convert :nq to :nl
- Convert :nl to :nq
- Convert :ttl to :lbl
- Convert :lbl to :ttl
- Convert :trig to :lbl
- Convert :lbl to :trig

