;; (defun rebalance (tree)
;;   (let ((left (binary-tree-left tree))
;; 	(right (binary-tree-right tree)))
;;     (multiple-value-bind (new-height new-balance)
;; 	(height-and-balance tree)
;;       (case new-balance
;; 	((-1 0 1)
;; 	 (setf (binary-tree-height tree) new-height
;; 	       (binary-tree-balance tree) new-balance)
;; 	 tree)
;; 	(2
;; 	 (cond ((= (binary-tree-balance left) 1)
;; 		(let ((lr (binary-tree-right left)))
;; 		  (setf (binary-tree-left tree) lr)
;; 		  (update-height-and-balance tree)
;; 		  (assert* (binary-tree-balance tree) "Expected balance to be zero in ~A" tree)
;; 		  (setf (binary-tree-right left) tree)
;; 		  (update-height-and-balance left)
;; 		  (assert* (zerop (binary-tree-balance left)) "Expected balance to be zero in ~A" left))
;; 		left)
;; 	       (t
;; 		(assert* (= (binary-tree-balance left) -1) "Expected balance to be -1 in ~A" left)
;; 		(let* ((lr (binary-tree-right left))
;; 		       (lrl (binary-tree-left lr))
;; 		       (lrr (binary-tree-right lr)))
;; 		  (setf (binary-tree-right left) lrl)
;; 		  (update-height-and-balance left)
;; 		  (setf (binary-tree-left tree) lrr)
;; 		  (update-height-and-balance tree)
;; 		  (setf (binary-tree-left lr) left)
;; 		  (setf (binary-tree-right lr) tree)
;; 		  (update-height-and-balance lr)
;; 		  lr))))
;; 	(-2
;; 	 (cond ((= (binary-tree-balance right) -1)
;; 		(let ((rl (binary-tree-left right)))
;; 		  (setf (binary-tree-right tree) rl)
;; 		  (update-height-and-balance tree)
;; 		  (assert* (binary-tree-balance tree) "Expected balance to be zero in ~A" tree)
;; 		  (setf (binary-tree-left right) tree)
;; 		  (update-height-and-balance right)
;; 		  (assert* (zerop (binary-tree-balance right)) "Expected balance to be zero in ~A" right))
;; 		right)
;; 	       (t
;; 		(assert* (= (binary-tree-balance right) 1) "Expected balance to be -1 in ~A" right)
;; 		(let* ((rl (binary-tree-left right))
;; 		       (rlr (binary-tree-right rl))
;; 		       (rll (binary-tree-left rl)))
;; 		  (setf (binary-tree-left right) rlr)
;; 		  (update-height-and-balance right)
;; 		  (setf (binary-tree-right tree) rll)
;; 		  (update-height-and-balance tree)
;; 		  (setf (binary-tree-right rl) right)
;; 		  (setf (binary-tree-left rl) tree)
;; 		  (update-height-and-balance rl)
;; 		  rl))))
;; 	(t (error* "Unexpected balance in ~A" tree))))))

