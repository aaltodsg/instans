
PREFIX :<http:example.org/>
PREFIX geo:<http://www.w3.org/2003/01/geo/wgs84_pos#>
PREFIX ssn:<http://purl.oclc.org/NET/ssnx/ssn#>
PREFIX ep:<http://www.ontologydesignpatterns.org/cp/owl/eventprocessing.owl#>
PREFIX omgeo: <http://www.ontotext.com/owlim/geo#>
PREFIX ff: <http://factforge.net/>

# Aggregate (EPA 6): Create new events out of the number of events observed in each hour

# Q6-1: Count event occurrence of each hour in memory

DELETE { GRAPH <http://example.org/memory/> {
  ?hourIRI :hour ?memhour ;
           :counter ?oldcount } }
INSERT { GRAPH <http://example.org/memory/> {
  ?hourIRI :hour ?memhour ;
           :counter ?newcount } }
WHERE { GRAPH <http://example.org/source/> {
  ?event a ep:EventObject ;
         ep:hasEventObjectSamplingTime ?time }
  BIND ( HOURS(?time) as ?hour )
#  BIND ( IRI(concat("Counter",str(?hour))) AS ?hourIRI)
  BIND ( IRI(concat("Counter","strike")) AS ?hourIRI)
  GRAPH <http://example.org/memory/> {
    OPTIONAL { ?hourIRI :hour ?memhour ;
                        :counter ?oldcount } }
#  FILTER ( ?hour = ?memhour || !bound(?memhour) )
  BIND ( COALESCE(?oldcount,0)+1 AS ?newcount )
} ;

# Q6-2: Output result when latest event is higher than the hour in an existing entry
# Delete memory

#DELETE { GRAPH <http://example.org/memory/> {
#  ?hourIRI :hour ?memhour ;
#           :counter ?oldcount } }
#INSERT { GRAPH <http://example.org/eventcounts/> {
#   [] a ep:EventObject ; # Insert counter events
#      :eventType :eventCount ;
#      :hour ?hour ;
#      :count ?nrevent } }
#WHERE { GRAPH <http://example.org/source/> {
#  ?event a ep:EventObject ;
#           ep:hasEventObjectSamplingTime ?time }
#  BIND ( HOURS(?time) as ?hour )
#  GRAPH <http://example.org/memory/> {
#    OPTIONAL { ?hourIRI :hour ?memhour ;
#                        :counter ?count } }
#  FILTER ( ?memhour < ?hour )  
#} ;

# Output everything

SELECT *
WHERE { GRAPH ?g { ?s ?p ?o } }


