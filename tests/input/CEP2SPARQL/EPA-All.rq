BASE <http://instans.org/>
PREFIX : <http:instans.org/default#>
PREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>
PREFIX ssn: <http://purl.oclc.org/NET/ssnx/ssn#>
PREFIX ep: <http://www.ontologydesignpatterns.org/cp/owl/eventprocessing.owl#>
PREFIX omgeo: <http://www.ontotext.com/owlim/geo#>
PREFIX ff: <http://factforge.net/>

##########################
# Stateless filter (EPA 1): Only events generated during business hours
##########################

# @name EPA1-Stateless
INSERT { GRAPH ?poststateless { ?s ?p ?o } }
WHERE { GRAPH ?g { FILTER (strStarts(str(?g),concat(str(<>),"Eve")))
    ?s ?p ?o .
    ?event ep:hasEventObjectSamplingTime ?time }
  FILTER ( ( HOURS(?time) > 8 ) && ( HOURS(?time) < 17 ) )
  BIND (IRI(concat("Poststateless-",strAfter(str(?event),str(<>)))) AS ?poststateless) } ;

# @name Cleanup-Poststateless
DELETE { GRAPH ?g1 { ?s ?p ?o } }
WHERE { GRAPH ?g1 {
    FILTER ( strStarts(str(?g1),"Poststateless-Eve") )
    ?event1 ep:hasEventObjectSamplingTime ?time1 .
    ?s ?p ?o }
  FILTER EXISTS { GRAPH ?g2 {
    FILTER ( strStarts(str(?g2),"Poststateless-Eve") )
    ?event2 ep:hasEventObjectSamplingTime ?time2 .
      FILTER (?time1 < ?time2)
  }  }
} ;

#########################
# Stateful filter (EPA 2): Only 1 event per hour
#########################

# @name EPA2-Init adds initial state to <memory>
INSERT DATA { GRAPH <memory> {  :stateful :hour -1 ; :passEvent [] } };

# @name EPA2-Stateful-update-memory
DELETE { GRAPH <memory> { :stateful :hour ?prevhour ;
                                    :passEvent ?prevPass } }
INSERT { GRAPH <memory> { :stateful :hour ?hour ;
                                    :passEvent ?event } }
WHERE { GRAPH ?g {
    # Matches basic events, update for other Channel names
    FILTER ( strStarts(str(?g),"Poststateless-Eve") )
    ?event ep:hasEventObjectSamplingTime ?time }
  GRAPH <memory> { :stateful :hour ?prevhour ;
                             :passEvent ?prevPass }
  BIND ( HOURS(?time) as ?hour)
  FILTER ( ?hour != ?prevhour ) # Compare current hour with memory
} ;

# @name EPA2-Stateful-pass-one-event-per-hour
INSERT { GRAPH ?poststateful { ?s ?p ?o } }
WHERE {
  GRAPH <memory> { :stateful :passEvent ?event }
  GRAPH ?g {
    # Matches basic events, update for other Channel names
    FILTER ( strStarts(str(?g),"Poststateless-Eve") )
    ?event ep:hasEventObjectSamplingTime ?time .
    ?s ?p ?o }
  BIND (IRI(concat("Poststateful-",strAfter(str(?event),str(<>)))) AS ?poststateful)
} ;

# @name Cleanup-Poststateful
DELETE { GRAPH ?g1 { ?s ?p ?o } }
WHERE { GRAPH ?g1 {
    FILTER ( strStarts(str(?g1),"Poststateful-Eve") )
    ?event1 ep:hasEventObjectSamplingTime ?time1 .
    ?s ?p ?o }
  FILTER EXISTS { GRAPH ?g2 {
    FILTER ( strStarts(str(?g2),"Poststateful-Eve") )
    ?event2 ep:hasEventObjectSamplingTime ?time2 .
      FILTER (?time1 < ?time2)
  }  }
} ;

################
# Enrich (EPA 3): Enrich events with the name of the closest location
################

# @name EPA3-Enrich
INSERT { GRAPH ?translated { 
    ?event :locationName ?label .
    ?s ?p ?o } }
WHERE { GRAPH ?g { 
    FILTER ( strStarts(str(?g),"Poststateful-Eve") )
    ?s ?p ?o . ?event a ep:EventObject .
     BIND ( "Espoo" as ?label ) # Temporary replacement until SERVICE implemented
#    SERVICE <http://factforge.net/sparql> { # Retrieve location label
#       ?location omgeo:nearby(?lat ?long "1km"); 
#                 ff:preferredLabel ?label }
  BIND (IRI(concat("Translated-",strAfter(str(?event),str(<>)))) AS ?translated) } } ;

# SERVICE-query replaced with BIND ( "Espoo" as ?label ) to avoid external lookup delay
# and because SERVICE is not yet implemented in INSTANS

# @name Cleanup-Translated
DELETE { GRAPH ?g1 { ?s ?p ?o } }
WHERE { GRAPH ?g1 {
    FILTER ( strStarts(str(?g1),"Translated-Eve") )
    ?event1 ep:hasEventObjectSamplingTime ?time1 .
    ?s ?p ?o }
  FILTER EXISTS { GRAPH ?g2 {
    FILTER ( strStarts(str(?g2),"Translated-Eve") )
    ?event2 ep:hasEventObjectSamplingTime ?time2 .
      FILTER (?time1 < ?time2)
  }  }
} ;

#################
# Project (EPA 4): Delete information from the incoming events
#################

# @name EPA4-Project
INSERT { GRAPH ?projected { ?s ?p ?o } }
WHERE { GRAPH ?g { 
    FILTER ( strStarts(str(?g),"Translated-Eve") )
    ?event a ep:EventObject .
    ?s ?p ?o }
  FILTER (?p != :locationName)
  BIND (IRI(concat("Projected-",strAfter(str(?event),str(<>)))) AS ?projected) } ;

# @name Cleanup-Projected
DELETE { GRAPH ?g1 { ?s ?p ?o } }
WHERE { GRAPH ?g1 {
    FILTER ( strStarts(str(?g1),"Projected-Eve") )
    ?event1 ep:hasEventObjectSamplingTime ?time1 .
    ?s ?p ?o }
  FILTER EXISTS { GRAPH ?g2 {
    FILTER ( strStarts(str(?g2),"Projected-Eve") )
    ?event2 ep:hasEventObjectSamplingTime ?time2 .
      FILTER (?time1 < ?time2)
  }  }
} ;

###############
# Split (EPA 5): Split into two separate channels
###############

INSERT { GRAPH ?geograph {
    ?event a ep:EventObject ;
           ep:hasEventObjectSamplingTime ?time ;
           geo:Point [ geo:lat ?lat ; geo:long ?long ; ] }
  GRAPH ?sensorgraph {
    ?event a ep:EventObject ;
           ssn:Sensor ?sensor ;
           ep:hasEventObjectSamplingTime ?time } }
WHERE { GRAPH ?g { # Match incoming events
    FILTER ( strStarts(str(?g),"Poststateful-Eve") )
    ?event a ep:EventObject ;
           ssn:Sensor ?sensor ;
           geo:Point [ geo:lat ?lat ; geo:long ?long ; ] ;
           ep:hasEventObjectSamplingTime ?time }
  BIND (IRI(concat("GeoEvents-",strAfter(str(?event),str(<>)))) AS ?geograph)
  BIND (IRI(concat("SensorEvents-",strAfter(str(?event),str(<>)))) AS ?sensorgraph) } ;

# @name Cleanup-SensorEvents
DELETE { GRAPH ?g1 { ?s ?p ?o } }
WHERE { GRAPH ?g1 {
    FILTER ( strStarts(str(?g1),"SensorEvents-Eve") )
    ?event1 ep:hasEventObjectSamplingTime ?time1 .
    ?s ?p ?o }
  FILTER EXISTS { GRAPH ?g2 {
    FILTER ( strStarts(str(?g2),"SensorEvents-Eve") )
    ?event2 ep:hasEventObjectSamplingTime ?time2 .
      FILTER (?time1 < ?time2)
  }  }
} ;

# @name Cleanup-GeoEvents
DELETE { GRAPH ?g1 { ?s ?p ?o } }
WHERE { GRAPH ?g1 {
    FILTER ( strStarts(str(?g1),"GeoEvents-Eve") )
    ?event1 ep:hasEventObjectSamplingTime ?time1 .
    ?s ?p ?o }
  FILTER EXISTS { GRAPH ?g2 {
    FILTER ( strStarts(str(?g2),"GeoEvents-Eve") )
    ?event2 ep:hasEventObjectSamplingTime ?time2 .
      FILTER (?time1 < ?time2)
  }  }
} ;

###################
# Aggregate (EPA 6): Count events per hour
###################

# @name EPA6-1-Initialize
INSERT DATA { GRAPH <memory> { :initHour :hour -1 ; :counter -1 } } ;

# @name EPA6-2-ExtractIncomingHour
INSERT { GRAPH <memory> { ?event :hasAggrHour ?hour } }
WHERE  { GRAPH ?g {
    FILTER ( strStarts(str(?g),concat(str(<>),"Eve")) )
    ?event ep:hasEventObjectSamplingTime ?time }
  BIND ( HOURS(?time) as ?hour ) } ;

# @name EPA6-3-IncreaseEventCounter
DELETE { GRAPH <memory> { ?x :counter ?oldcount .
                          ?event :hasAggrHour ?hour } }
INSERT { GRAPH <memory> { ?x :counter ?newcount} }
WHERE  { GRAPH <memory> { ?x :hour ?memhour ;
    :counter ?oldcount . ?event :hasAggrHour ?hour }
  FILTER(?hour = ?memhour)
  BIND ( ?oldcount + 1 AS ?newcount ) } ;

# @name EPA6-4-OutputEventCounts
CONSTRUCT { GRAPH <eventcounts> { # Insert counter event
    [] a ep:EventObject ; :eventType :eventCount ;
       :hour ?memhour ; :count ?count } }
WHERE { GRAPH <memory> { ?x :hour ?memhour ; :counter ?count .
    ?event :hasAggrHour ?hour }
  FILTER ( ?memhour != -1 && ?memhour != ?hour ) } ;

# @name EPA6-5-ResetMemory
DELETE { GRAPH <memory> { ?x :hour ?memhour ; :counter ?count } }
INSERT { GRAPH <memory> { [] :hour ?hour ; :counter 0 } }
WHERE  { GRAPH <memory> { ?x :hour ?memhour ; :counter ?count .
    ?event :hasAggrHour ?hour }
  FILTER ( ?memhour != ?hour ) } ;

#################
# Compose (EPA 7): Combine two event streams into one
#################

# @name EPA7-Compose
INSERT { GRAPH ?combined {
    ?event a ep:EventObject ; # Forward re-combined events
           ssn:Sensor ?sensor ;
           geo:Point [ geo:lat ?lat ; geo:long ?long ; ] ;
           ep:hasEventObjectSamplingTime ?time } }
WHERE { 
  GRAPH ?g1 { FILTER(strStarts(str(?g1),"GeoEvents-"))
    ?event a ep:EventObject ;
           geo:Point [ geo:lat ?lat ; geo:long ?long ; ] }
  GRAPH ?g2 { FILTER(strStarts(str(?g2),"SensorEvents-"))
    ?event a ep:EventObject ;
           ssn:Sensor ?sensor ;
           ep:hasEventObjectSamplingTime ?time }
  BIND (IRI(concat("Combined-",strAfter(str(?event),str(<>)))) AS ?combined)
} ;

# @name Cleanup-Combined
DELETE { GRAPH ?g1 { ?s ?p ?o } }
WHERE { GRAPH ?g1 {
    FILTER ( strStarts(str(?g1),"Combined-Eve") )
    ?event1 ep:hasEventObjectSamplingTime ?time1 .
    ?s ?p ?o }
  FILTER EXISTS { GRAPH ?g2 {
    FILTER ( strStarts(str(?g2),"Combined-Eve") )
    ?event2 ep:hasEventObjectSamplingTime ?time2 .
      FILTER (?time1 < ?time2)
  }  }
} ;

#################
# Pattern (EPA 8): Match a pattern of events
#################

# @name EPA8-Transform-Initialize memory for previous point
INSERT { GRAPH <memory> {
    [] a :transformPrevPoint ;
       ssn:Sensor ?sensor ;
       geo:Point  [ geo:lat ?lat ; geo:long ?long ; ]  } }
WHERE { GRAPH ?g { FILTER (strStarts(str(?g),concat(str(<>),"Eve")))
    ?event a ep:EventObject ;
           ssn:Sensor ?sensor ;
           geo:Point [ geo:lat ?lat ; geo:long ?long ; ] }
  FILTER NOT EXISTS {
    GRAPH <memory> { ?x a :transformPrevPoint ; ssn:Sensor ?sensor } } } ;

# @name EPA8-Transform points to compass directions
DELETE {  GRAPH <memory> { # Delete previous point
  ?mem geo:Point ?blnk . ?blnk geo:lat ?prevlat ; geo:long ?prevlong } }
INSERT { GRAPH <memory> { # Write new point
    ?mem geo:Point [ geo:lat ?lat ; geo:long ?long ; ] }
  GRAPH <directions> { # Output direction
    ?event a ep:EventObject ;
           ssn:Sensor ?sensor ;
           ep:hasEventObjectSamplingTime ?time ;
	   :direction ?dir } }
WHERE { GRAPH ?g { FILTER (strStarts(str(?g),concat(str(<>),"Eve")))
    ?event a ep:EventObject ;
           ssn:Sensor ?sensor ;
           ep:hasEventObjectSamplingTime ?time ;
           geo:Point [ geo:lat ?lat ; geo:long ?long ; ] . } 
  GRAPH <memory> { # Retrieve previous point
    ?mem a :transformPrevPoint ;
         ssn:Sensor ?sensor ;
         geo:Point ?blnk . ?blnk geo:lat ?prevlat ; geo:long ?prevlong }
  BIND ( IF ( ?lat > ?prevlat, "N", "") as ?latdir1) # Test for directions
  BIND ( IF ( ?lat < ?prevlat, "S", "") as ?latdir2)
  BIND ( IF ( ?long > ?prevlong, "E", "") as ?longdir1)
  BIND ( IF ( ?long < ?prevlong, "W", "") as ?longdir2) 
  BIND ( concat(?latdir1, ?latdir2, ?longdir1, ?longdir2) as ?tdir ) # Concatenate result
  BIND ( IF ( !bound(?tdir) || strlen(?tdir)=0, "0", ?tdir ) as ?dir ) } ;

# @name EPA8-Transform-Directions-Cleanup
DELETE { GRAPH <directions> { 
    ?event a ep:EventObject ;
           ssn:Sensor ?sensor ;
           ep:hasEventObjectSamplingTime ?time1 ;
	   :direction ?dir } }
WHERE { GRAPH <directions> {
    ?event a ep:EventObject ;
           ssn:Sensor ?sensor ;
           ep:hasEventObjectSamplingTime ?time1 ;
	   :direction ?dir }
  FILTER EXISTS { GRAPH <directions> {
    ?event2 ep:hasEventObjectSamplingTime ?time2 .
      FILTER (?time1 < ?time2) } } } ;

# @name EPA8-1-Pattern-Initialize
INSERT { GRAPH <memory> { # Initialize a new entry to memory
      [] a :patternIndexEntry ; ssn:Sensor ?sensor ;
           :basedOnEvent 0 ; :patternIndex 0 } }
WHERE { GRAPH <directions> {
    ?event a ep:EventObject ; ssn:Sensor ?sensor }
  FILTER NOT EXISTS { GRAPH <memory> { ?mem a :patternIndexEntry ; ssn:Sensor ?sensor } } } ;

# @name EPA8-2-Advance-Index when direction matches with pattern
DELETE {  GRAPH <memory> { # Clear old index from memory
    ?mem :basedOnEvent ?oldEvent ;
         :patternIndex ?oldIndex } }
INSERT { GRAPH <memory> { # Write new index to memory
    ?mem :basedOnEvent ?event ; :patternIndex ?newIndex } }
WHERE { GRAPH <directions> {
    ?event a ep:EventObject ; # Match directional input
           ssn:Sensor ?sensor ;
	   :direction ?dir }
  FILTER ( ?dir != "0" )
  GRAPH <memory> { # Retrieve index from memory
      ?mem a :patternIndexEntry ;
           ssn:Sensor ?sensor ;
           :basedOnEvent ?oldEvent ;
           :patternIndex ?oldIndex }
  FILTER ( !sameTerm(?event,?oldEvent) ) # Only once per event
  GRAPH <pattern> { # Retrieve pattern index and value
    ?pattern :index ?ptIndex ;
             :value ?ptValue }
  BIND ( ?oldIndex+1 as ?newIndex )
  FILTER ( (?dir = ?ptValue) && (?newIndex = ?ptIndex) ) # Pass through if value and index match
} ;

# @name EPA8-3-ResetIndex when latest event does not match with pattern
DELETE { GRAPH <memory> { # Remove index from memory
    ?mem a :patternIndexEntry ;
         ssn:Sensor ?sensor ;
         :basedOnEvent ?oldEvent ;
         :patternIndex ?oldIndex } }
WHERE { GRAPH <directions> { # Match directional input
    ?event a ep:EventObject ;
           ssn:Sensor ?sensor ;
	   :direction ?dir }
  GRAPH <memory> { # Retrieve index from memory
      ?mem a :patternIndexEntry ;
           ssn:Sensor ?sensor ;
           :basedOnEvent ?oldEvent ;
           :patternIndex ?oldIndex }
  FILTER ( !sameTerm(?event,?oldEvent) ) # Must be different events
  GRAPH <pattern> {
    ?pattern :index ?ptIndex ;
             :value ?ptValue }
 FILTER ( (?dir != ?ptValue) && (?oldIndex+1 = ?ptIndex) && (?oldIndex>0) ) # Pass if value and index do not match
} ;

# @name EPA8-4-Complete-Reset index when pattern is complete
DELETE {  GRAPH <memory> { # Remove last index from memory
    ?mem a :patternIndexEntry ; ssn:Sensor ?sensor ;
         :basedOnEvent ?oldEvent ; :patternIndex ?oldIndex } }
WHERE { GRAPH <pattern> { :pattern :length ?length }
  GRAPH <memory> { # Check, when pattern index in memory matches pattern length.
      ?mem a :patternIndexEntry ; ssn:Sensor ?sensor ;
           :basedOnEvent ?oldEvent ; :patternIndex ?oldIndex }
  FILTER ( ?oldIndex = ?length ) } ;

# @name EPA8-5-Output-Result
CONSTRUCT { GRAPH <PatternDetect> {
    [] a ep:EventObject ; :patterndetected "Pattern detected!" ;
       ssn:Sensor ?sensor ; :lastEvent ?oldEvent } }
WHERE { GRAPH <pattern> { :pattern :length ?length }
  GRAPH <memory> { # Check, when pattern index in memory matches pattern length.
      ?mem a :patternIndexEntry ;
           ssn:Sensor ?sensor ;
           :basedOnEvent ?oldEvent ;
           :patternIndex ?oldIndex }
  FILTER ( ?oldIndex = ?length ) } ;

