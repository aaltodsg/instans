;; (defun node-use-succeq (node)
;;   (sparql-var-list-union (node-use node) (node-use-succ node)))

;; (defgeneric node-defines-vars (node)
;;   (:method ((this alpha-node))
;;     (alpha-node-variables this))
;;   (:method ((this filter-memory))
;;     (list (filter-memory-prev-value-var this)))
;;   (:method ((this bind-node))
;;     (list (bind-variable this)))
;;   (:method ((this existence-start-node))
;;     (list (existence-active-p-var this) (existence-counter-var this)))
;;   (:method ((this aggregate-join-node))
;;     (loop for (var . rest) in (aggregate-join-var-aggr-list this)
;; 	  collect var))
;;   (:method ((this query-node))
;;     (solution-modifiers-project-vars this))
;;   (:method ((this node)) nil))

;; (defgeneric node-uses-vars (node)
;;   (:method ((this join-node))
;;     (sparql-var-list-intersection (node-def-preceq (join-alpha this)) (node-def-preceq (join-beta this))))
;;   (:method ((this bind-node))
;;     (bind-form-parameters this))
;;   (:method ((this filter-memory))
;;     (filter-test-parameters this))
;;   (:method ((this filter-node))
;;     (filter-test-parameters this))
;;   (:method ((this existence-start-node))
;;     (list (existence-counter-var this) (existence-active-p-var this)))
;;   (:method ((this existence-end-node))
;;     (let ((start-node (subgraph-start-node this)))
;;       (list (existence-counter-var start-node) (existence-active-p-var start-node))))
;;   (:method ((this aggregate-join-node))
;;     (collect-expression-variables (aggregate-join-group this)))
;;   (:method ((this query-node))
;;     (sparql-var-list-union (unless (eq (solution-modifiers-project this) '*)
;; 		  (loop for item in (solution-modifiers-project-vars this)
;; 			when (and (consp item) (eq (first item) 'AS))
;; 			nconc (collect-expression-variables (third item))))
;; 		(loop for ord in (solution-modifiers-order-by this)
;; 		      nconc (cond ((member (car ord) '(ASC DESC))
;; 				   (collect-expression-variables (second ord)))
;; 				  (t
;; 				   (collect-expression-variables ord))))))
;;   (:method ((this modify-node))
;;     (list-union (modify-delete-parameters this) (modify-insert-parameters this)))
;;   (:method ((this node)) nil))

;; ;;; The main operation

;; (defun compute-node-defs (nodes)
;;   (let ((visited nil))
;;     (labels ((visit (node)
;; 	       (unless (member node visited)
;; 		 (inform "enter visit ~S" node)
;; 		 (push node visited)
;; 		 (let ((precs (node-effective-precs node)))
;; 		   (inform "~s precs = ~S" node precs)
;; 		   (loop for prec in precs do (visit prec))
;; 		   (let ((def-prec (reduce #'list-union (mapcar #'node-def-preceq precs) :initial-value nil)))
;; 		     (setf (node-def-prec node) def-prec)
;; 		     (setf (node-def node) (node-defines-vars node))))
;; 		 (inform "exit visit ~S" node))))
;;       (loop for node in nodes do (visit node))))
;;   nodes)

;; (defun compute-node-uses (nodes)
;;   (let ((visited nil))
;;     (labels ((visit (node)
;; 	       (unless (member node visited)
;; 		 (push node visited)
;; 		 (let ((succs (node-succ node)))
;; 		   (loop for succ in succs do (visit succ))
;; 		   (let ((use-succ (reduce #'list-union (mapcar #'node-use-succeq succs) :initial-value nil)))
;; 		     (setf (node-use-succ node) use-succ)
;; 		     (setf (node-use node) (node-uses-vars node)))))))
;;       (loop for node in nodes do (visit node))))
;;   nodes)

;; ;;; NEW NOTE! We should not delete any vars, since this may prevent right number of SPARQL instances being generated.
;; ;;; Note! vars_add and vars_del can be used to optimize the contents of the tokens.  If we want to be able to add rules in runtime,
;; ;;; it may be beneficial not to delete much of anything in tokens, since we may later find out that nodes generated for a new rule may use these variables.
;; ;;; Then the tokens created before would be invalid and they have to be generated again. Not nice! However, if we are not going to add rules at runtime,
;; ;;; we may save space by deleting vars. This depends also on the data structure used for variables.
;; (defun compute-node-vars (nodes)
;;   (inform "enter compute-node-vars")
;;   (let ((visited nil))
;;     (labels ((visit (node)
;; 	       (unless (member node visited)
;; 		 (push node visited)
;; 		 (let ((precs (node-effective-precs node)))
;; 		   (loop for prec in precs do (visit prec))
;; 		   (let ((all-vars-in (reduce #'list-union (mapcar #'node-all-vars-out precs) :initial-value nil))
;; 			 (visible-vars-in (reduce #'list-union (mapcar #'node-visible-vars-out precs) :initial-value nil)))
;; 		     (setf (node-all-vars-in node) all-vars-in)
;; 		     (setf (node-visible-vars-in node) visible-vars-in)
;; 		     (setf (node-all-vars-out node) (list-union all-vars-in (node-def node) :test #'sparql-var-equal))
;; 		     (setf (node-visible-vars-out node)
;; 			   (list-difference (list-union visible-vars-in (node-def node) :test #'sparql-var-equal)
;; 					    (node-kill node) :test #'sparql-var-equal))
;; 		     (when (join-node-p node)
;; 		       (setf (join-beta-minus-alpha-vars node) (list-difference (node-all-vars-out (join-beta node)) (node-all-vars-out (join-alpha node))
;; 										:test #'sparql-var-equal))
;; 		       (setf (join-alpha-minus-beta-vars node) (list-difference (node-all-vars-out (join-alpha node)) (node-all-vars-out (join-beta node))
;; 										:test #'sparql-var-equal)))
;; 		     (flet ((mn (vars) (mapcar #'(lambda (v) (reverse-resolve-binding (node-instans node) v)) vars)))
;; 		       (inform "~%visit ~S~%def ~S~%use ~S~%def< ~S~%use> ~S~%kill ~S~%all-vars-in ~S~%all-vars-out ~S~%visible-vars-in ~S~%visible-vars-out ~S" node
;; 			       (mn (node-def node)) (mn (node-use node))
;; 			       (mn (node-def-prec node)) (mn (node-use-succ node))
;; 			       (mn (node-kill node))
;; 			       (mn (node-all-vars-in node)) (mn (node-all-vars-out node))
;; 			       (mn (node-visible-vars-in node)) (mn (node-visible-vars-out node))))
;; 		     )))))
;;       (loop for node in nodes do (visit node))))
;;   (inform "exit compute-node-vars")
;;   nodes)
