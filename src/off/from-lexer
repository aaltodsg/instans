(defun eat-string-literal-old (lexer quote-char short-banned-chars short-terminal long-terminal)
  (block inner
    (let ((buf (empty-chbuf)))
      (flet ((handle-escape ()
	       (let ((ch (get-char lexer)))
		 (cond ((not (peekch lexer))
			(lexer-error lexer "Unexpected EOF"))
		       ((char-in-set-p* (peekch lexer) "tbnrf\\\"'")
			(chbuf-put-chars buf ch (get-char lexer)))
		       ((or (get-char-if-looking-at lexer #\u) (get-char-if-looking-at lexer #\U))
			(chbuf-put-char buf (get-uhex lexer)))
		       (t (lexer-error lexer "Illegal escape char '~C'" (get-char lexer)))))))
	(cond ((and long-terminal (get-char-if-looking-at lexer quote-char))
	       (cond ((get-char-if-looking-at lexer quote-char)
		      (loop for ch = (peekch lexer)
			    do (cond ((get-char-if-looking-at lexer quote-char)
				      (cond ((get-char-if-looking-at lexer quote-char)
					     (cond ((get-char-if-looking-at lexer quote-char)
						    (return-from inner (return-input-token lexer long-terminal (canonize-string lexer buf))))
						   (t (chbuf-put-chars buf quote-char quote-char))))
					    (t (chbuf-put-char buf quote-char))))
				     ((char=* ch #\\)
				      (handle-escape))
				     (t
				      (chbuf-put-char buf (get-char lexer))))))
		     (t (return-input-token lexer short-terminal (canonize-string lexer buf)))))
	      (t
	       (loop do (cond ((get-char-if-looking-at lexer quote-char)
			       (return-input-token lexer short-terminal (canonize-string lexer buf)))
			      (t
			       (let ((ch (peekch lexer)))
				 (cond ((char=* ch #\\)
					(handle-escape))
				       ((and ch (not (char-in-set-p* ch short-banned-chars)))
					(chbuf-put-char buf (get-char lexer)))
				       (t (lexer-error lexer "Malformed string literal, missing ~C" quote-char)))))))))))))

(defun eat-pn-local-old (lexer prefix-binding) ; prefix and ':'
  (let ((buf (empty-chbuf)))
    (loop do (cond ((get-char-if-looking-at lexer #\%)
		    (slurp-hex lexer (chbuf-put-char buf #\%)))
		   ((get-char-if-looking-at lexer #\\)
		    (slurp-local-esc lexer (chbuf-put-char buf #\\)))
		   (t
		    (let ((ch (peekch lexer)))
		      (cond ((or (pn-chars-p ch) (char-in-set-p* ch ".:"))
			     (chbuf-put-char buf (get-char lexer)))
			    ((zerop (chbuf-index buf))
			     (return-input-token lexer 'PNAME_NS-TERMINAL prefix-binding))
			    (t
			     (return-input-token lexer 'PNAME_LN-TERMINAL
						 (progn
						   (when (and (char=* (aref (chbuf-contents buf) (1- (chbuf-index buf))) #\.)
							      (or (= (chbuf-index buf) 1)
								  (not (char=* (aref (chbuf-contents buf) (- (chbuf-index buf) 2)) #\\))))
						     (unget-char lexer #\.)
						     (chbuf-drop-last-char buf))
						   (list prefix-binding (canonize-string lexer buf))))))))))))

