# Aggregate Calculation Library

# This query collection is a trial in creating a generic SPARQL query "library"
# for computing aggregate values over RDF streams using the INSTANS platform
# Window definitions are given in an accompanying Turtle document.

# Time 0 is specific to a series of windows and set by the first qualifying event
# Windows: [ 0, windowLength ), [ windowLength, 2*windowLength ), ...

# Note: Multiple overlapping windows may be terminated by one incoming event.
# In this case the result window ordering is random.

# When processing finite-length input such as a file, the last triple should be ":this :is :last"
# to trigger processing of the final windows.

# By Mikko Rinne 23.5.2014

# History:
# 16.05.2014 MJR First version created
# 20.05.2014 MJR Fixed support for multiple windows, added selection of timeType.
# 21.05.2014 MJR Added support for independent window step sizes (also non-tumbling windows)
# 22.05.2014 MJR Added min & max, support for deletion of incoming events, optimizations
# 23.05.2014 MJR Added some more documentation in comments
# 03.12.2014 MJR Changed the xsd:datetime conversion to use the INSTANS built-in function instead of SPARQL

PREFIX ep: <http://www.ontologydesignpatterns.org/cp/owl/eventprocessing.owl#>
PREFIX dul: <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX datetime: <http://instans.org/extensions/datetime#>
PREFIX : <http://instans.org/>

# Q1: Record time of first event as zero-point, initialize window series
INSERT {
  GRAPH <http://window_memory> {
    # Data specific for a single window
    ?winName a :windowEntry ;
             :windowSpec ?winspec ;
             :windowNumber 1 ;
             :windowStartTime 0 ;
             :windowSum 0 ;
             :windowN 0 ;
             :windowMin 0 ;
             :windowMax 0 ;
             :status :open .
    # Data specific for one series of windows
    ?winspec a :windowSeriesData ;
             :hasZeroTime ?zeroTime ;
             :windowCounter 1 ;
             :latestStart 0 .
  }
}
WHERE {
  # Match window specifications and time predicates
  ?winspec a :windowSpecification ;
           :timePredicate ?timePredicate .
  ?event ?timePredicate ?zeroTime .
  # Initialize winName for first window of the series
  BIND (iri(concat(str(?winspec),"_1")) as ?winName)
  # Only activate in case the window series data has not been setup yet
  FILTER NOT EXISTS { GRAPH <http://window_memory> { ?winspec a :windowSeriesData } }
}

;

# Q2a: Pre-process input events if timeType is xsd:dateTime

DELETE {
  # Clean up any closed toggles for the matching window
  GRAPH <http://window_memory> {
    ?winName :status :closed .
  }
}
INSERT {
  GRAPH <http://processed_input> {
    ?event a ep:EventObject ;
           :hasWindowTime ?windowTime ;
           dul:hasRegionDataValue ?currentValue .
  }
  # Open :status (new data available) for the matching window
  GRAPH <http://window_memory> {
    ?winName :status :open .
  }
}
WHERE {
  # Match window specification
  ?winspec a :windowSpecification ;
           :timePredicate ?timePredicate ;
           :timeType xsd:dateTime ; 
           :valuePredicate ?valuePredicate .

  # Only proceed after zeroTime has been defined
  GRAPH <http://window_memory> {
    ?winspec :hasZeroTime ?zeroTime .
    # Find active windows associated with this spec
    ?winName a :windowEntry ;
             :windowSpec ?winspec .
  }
  # Match incoming event
  ?event ?timePredicate ?currentTime ;
         ?valuePredicate ?currentValue .

  BIND (datetime:datetime_in_seconds(?currentTime)-datetime:datetime_in_seconds(?zeroTime) AS ?windowTime)
}

;

# Q2b: Pre-process input events if timeType is xsd:integer

DELETE {
  # Clean up any closed toggles for the matching window
  GRAPH <http://window_memory> {
    ?winName :status :closed .
  }
}
INSERT {
  GRAPH <http://processed_input> {
    ?event a ep:EventObject ;
           :hasWindowTime ?windowTime ;
           dul:hasRegionDataValue ?currentValue .
  }
  # Open :status (new data available) for the matching window
  GRAPH <http://window_memory> {
    ?winName :status :open .
  }
}
WHERE {
  # Match window specification
  ?winspec a :windowSpecification ;
           :timePredicate ?timePredicate ;
           :timeType xsd:integer ; 
           :valuePredicate ?valuePredicate .

  # Only proceed after zeroTime has been defined
  GRAPH <http://window_memory> {
    ?winspec :hasZeroTime ?zeroTime .
    # Find active windows associated with this spec
    ?winName a :windowEntry ;
             :windowSpec ?winspec .
  }
  # Match incoming event
  ?event ?timePredicate ?currentTime ;
         ?valuePredicate ?currentValue .

  # Convert to zero-origin
  BIND (?currentTime-?zeroTime AS ?windowTime)
}

;

# Q3: Remove incoming events after they no longer belong to a new window

# Note: This rule removes everything from incoming events after there is a newer event.

# Remove incoming event
DELETE {
  ?event1 ?pred ?obj
}
WHERE {
  # Proceed only if the removal parameter is set
  :deleteInputAfterProcessing :value TRUE .

  # Match window specification
  ?winspec a :windowSpecification ;
           :timePredicate ?timePredicate ;
           :valuePredicate ?valuePredicate .

  # Match incoming event
  ?event1 ?timePredicate ?time1 ;
         ?pred ?obj .

  # Select events happened before current latest starting time
  FILTER EXISTS {
    ?event2 ?timePredicate ?time2 .
    FILTER (?time1 < ?time2)
  } 
}

;

# Q4: Insert new entry to window memory

# Note: Status :open / :closed toggle is used, because otherwise the addition is stuck in an eternal loop
#       If the event would be removed here instead, other associated queries would not receive it

DELETE {
  # Remove previous values
  GRAPH <http://window_memory> {
     ?winName :windowSum ?lastSum ;
              :windowN ?lastN ;
              :windowMin ?lastMin ;
              :windowMax ?lastMax ;
              :status :open .
  }
}
# Insert new values
INSERT {
  GRAPH <http://window_memory> {
     ?winName :windowSum ?newSum ;
              :windowN ?newN ;
              :windowMin ?newMin ;
              :windowMax ?newMax ;
              :status :closed .
  }
}
WHERE {
  # Match window specification
  ?winspec a :windowSpecification ;
           :windowLength ?windowLength .

  # Match data for this window
  GRAPH <http://window_memory> {
     ?winName a :windowEntry ;
              :windowSpec ?winspec ;
              :windowStartTime ?startTime ;
              :windowSum ?lastSum ;
              :windowN ?lastN ;
              :windowMin ?lastMin ;
              :windowMax ?lastMax ;
              :status :open .
  }

  GRAPH <http://processed_input> {
    ?event a ep:EventObject ;
           :hasWindowTime ?windowTime ;
           dul:hasRegionDataValue ?value .
  }

  FILTER (?windowTime < ?startTime+?windowLength)
  BIND (?lastN + 1 AS ?newN)
  BIND (?lastSum + ?value AS ?newSum)
  BIND ( IF ( ?lastN=0 , ?value , IF ( ?value < ?lastMin , ?value , ?lastMin ) ) AS ?newMin )
  BIND ( IF ( ?lastN=0 , ?value , IF ( ?value > ?lastMax , ?value , ?lastMax ) ) AS ?newMax )
}

;

# Q5: Initiate new window after :windowStep has been passed.

DELETE {
  # Remove old window counter
  GRAPH <http://window_memory> {
     ?winspec :windowCounter ?windowCount ;
              :latestStart ?latestStart .
  }
}
INSERT {
# Start a new window & increase window counter & latestStart
  GRAPH <http://window_memory> {
     ?winNew a :windowEntry ;
             :windowSpec ?winspec ;
             :windowNumber ?newWindowCount ;
             :windowStartTime ?newLatestStart ;
             :windowSum 0 ;
             :windowN 0 ;
             :windowMin 0 ;
             :windowMax 0 .
     ?winspec :windowCounter ?newWindowCount ;
              :latestStart ?newLatestStart .
  }
}
WHERE {
  # Match window specification
  ?winspec a :windowSpecification ;
           :windowStep ?windowStep .

  GRAPH <http://processed_input> {
    ?event a ep:EventObject ;
           :hasWindowTime ?windowTime ;
           dul:hasRegionDataValue ?value
  }
  
  GRAPH <http://window_memory> {
     ?winspec :windowCounter ?windowCount ;
              :latestStart ?latestStart .
  }

  # Test for time to belong to the next window
  FILTER ( ?windowTime >= ?latestStart+?windowStep )
  # Starting time of next window will be current + windowStep
  BIND (?latestStart+?windowStep AS ?newLatestStart)
  # Increase window counter by one
  BIND (?windowCount+1 AS ?newWindowCount)
  # Generate a new subject to label the window
  BIND (iri(concat(str(?winspec),"_",str(?newWindowCount))) as ?winNew)
}

;

# Q6: Detect out-of-bounds event, terminate window, collect statistics

DELETE {
# Remove window record
  GRAPH <http://window_memory> {
     ?winName a :windowEntry ;
              :windowSpec ?winspec ;
              :windowNumber ?windowNumber ;
              :windowStartTime ?startTime ;
              :windowSum ?lastSum ;
              :windowN ?lastN ;
              :windowMin ?lastMin ;
              :windowMax ?lastMax .
  }
}
# Publish results in output graph
INSERT {
  GRAPH <http://result_output> {
    ?winName a :resultWindow ;
             :windowNumber ?windowNumber ;
             :windowStartTime ?startTime ;
             :windowSum ?lastSum ;
             :windowAverage ?average ;
             :windowN ?lastN ;
             :windowMin ?lastMin ;
             :windowMax ?lastMax .
  }
}
WHERE {
  # Match window specification
  ?winspec a :windowSpecification ;
           :windowLength ?windowLength .

  # Match processed event
  GRAPH <http://processed_input> {
    ?event a ep:EventObject ;
           :hasWindowTime ?windowTime ;
           dul:hasRegionDataValue ?value
  }

  # Match current windows  
  GRAPH <http://window_memory> {
     ?winName a :windowEntry ;
              :windowSpec ?winspec ;
              :windowNumber ?windowNumber ;
              :windowStartTime ?startTime ;
              :windowSum ?lastSum ;
              :windowN ?lastN ;
              :windowMin ?lastMin ;
              :windowMax ?lastMax .
  }

  # Test for an out-of-window-bounds time
  FILTER ( ?windowTime >= ?startTime+?windowLength )
  # Avoid division by zero in case of an empty window
  BIND ( IF (?lastN > 0, ?lastSum/?lastN, 0) AS ?average)
}

;

# Q7: Delete processed event, when a newer event is available

DELETE {
  GRAPH <http://processed_input> {
    ?event1 a ep:EventObject ;
            :hasWindowTime ?windowTime1 ;
            dul:hasRegionDataValue ?value1
  }
}
WHERE {
  GRAPH <http://processed_input> {
    ?event1 a ep:EventObject ;
            :hasWindowTime ?windowTime1 ;
            dul:hasRegionDataValue ?value1
  }
  FILTER EXISTS { GRAPH <http://processed_input> {
      ?event2 a ep:EventObject ;
              :hasWindowTime ?windowTime2 .
      FILTER (?windowTime1 < ?windowTime2)
  }  }
}

;

# Q8: Output final window when an end marker (:this :is :last) is found

# Remove final windows
DELETE {
  GRAPH <http://window_memory> {
     ?winName a :windowEntry ;
              :windowSpec ?winspec ;
              :windowNumber ?windowNumber ;
              :windowStartTime ?startTime ;
              :windowSum ?lastSum ;
              :windowN ?lastN ;
              :windowMin ?lastMin ;
              :windowMax ?lastMax .
  }
}
# Publish results in output graph
INSERT {
  GRAPH <http://result_output> {
    ?winName a :resultWindow ;
             :windowNumber ?windowNumber ;
             :windowStartTime ?startTime ;
             :windowSum ?lastSum ;
             :windowAverage ?average ;
             :windowN ?lastN ;
             :windowMin ?lastMin ;
             :windowMax ?lastMax .
  }
}
WHERE {
  # Match final triple
  :this :is :last .
  
  GRAPH <http://window_memory> {
     ?winName a :windowEntry ;
              :windowSpec ?winspec ;
              :windowNumber ?windowNumber ;
              :windowStartTime ?startTime ;
              :windowSum ?lastSum ;
              :windowN ?lastN ;
              :windowMin ?lastMin ;
              :windowMax ?lastMax .
  }

  # Test for empty window, avoid division by zero
  BIND ( IF (?lastN > 0, ?lastSum/?lastN, 0) AS ?average)
}

;

# Q9: Display results

SELECT *
WHERE {
  GRAPH <http://result_output> {
    ?Window a :resultWindow ;
             :windowNumber ?Number ;
             :windowStartTime ?StartTime ;
             :windowSum ?Sum ;
             :windowAverage ?Average ;
             :windowN ?Entries ;
             :windowMin ?Min ;
             :windowMax ?Max .
# Uncomment the following line to skip windows with no content
#    FILTER (?Entries > 0)
  }
}

