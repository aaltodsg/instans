BASE <http://instans.org/>
PREFIX : <http:instans.org/default#>
PREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>
PREFIX ssn: <http://purl.oclc.org/NET/ssnx/ssn#>
PREFIX ep: <http://www.ontologydesignpatterns.org/cp/owl/eventprocessing.owl#>
PREFIX omgeo: <http://www.ontotext.com/owlim/geo#>
PREFIX ff: <http://factforge.net/>

# Aggregate (EPA 6): Create new events out of the number of events observed in each hour

# @name EPA6-1-Init
INSERT DATA { GRAPH <memory> { :initHour :hour -1 ; :counter -1 } } ;

# @name EPA6-2-ExtractIncomingHour
DELETE { GRAPH <memory> { ?prevEvent :hasAggrHour ?prevHour } }
INSERT { GRAPH <memory> { ?event :hasAggrHour ?hour } }
WHERE  { GRAPH <memory> { ?prevEvent :hasAggrHour ?prevHour }
  GRAPH ?g {
    FILTER ( strStarts(str(?g),concat(str(<>),"Eve")) )
    ?event ep:hasEventObjectSamplingTime ?time }
  BIND ( HOURS(?time) as ?hour )
} ;

# @name EPA6-2-IncreaseEventCounter
DELETE { GRAPH <memory> { ?x :counter ?oldcount }
  GRAPH ?g { ?event ep:hasEventObjectSamplingTime ?time } }
INSERT { GRAPH <memory> { ?x :counter ?newcount} }
WHERE  { GRAPH <memory> { ?x :hour ?memhour ; :counter ?oldcount }
  GRAPH ?g {
    FILTER ( strStarts(str(?g),concat(str(<>),"Eve")) )
    ?event ep:hasEventObjectSamplingTime ?time }
  BIND ( HOURS(?time) as ?hour )
  FILTER(?hour = ?memhour)
  BIND ( ?oldcount + 1 AS ?newcount )
} ;

# @name EPA6-3-OutputEventCounts
CONSTRUCT { GRAPH <eventcounts> { # Insert counter event
    [] a ep:EventObject ;
       :eventType :eventCount ;
       :hour ?memhour ;
       :count ?count } }
WHERE { GRAPH <memory> { # Match entries in memory
    ?x :hour ?memhour ; :counter ?count }
  GRAPH ?g { # Match time from incoming events
    FILTER ( strStarts(str(?g),concat(str(<>),"Eve")) )
    ?event ep:hasEventObjectSamplingTime ?time }
  BIND ( HOURS(?time) as ?hour )
  FILTER ( ?memhour != -1 && ?memhour != ?hour )
} ;

# @name EPA6-4-ResetMemory
DELETE { GRAPH <memory> { # Remove final counter entry
  ?x :hour ?memhour ; :counter ?count } }
INSERT { GRAPH <memory> { [] :hour ?hour ; :counter 0 } }
WHERE { GRAPH <memory> { # Match entries in memory
    ?x :hour ?memhour ; :counter ?count }
  GRAPH ?g { # Match time from incoming events
    FILTER ( strStarts(str(?g),concat(str(<>),"Eve")) )
    ?event ep:hasEventObjectSamplingTime ?time }
  BIND ( HOURS(?time) as ?hour )
  FILTER ( ?memhour != ?hour )
} ;
