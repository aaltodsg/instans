(defgeneric add-quads (instans quads)
  (:method ((this instans) quads)
    (loop for (s p o g) in quads do (rete-add this s p o g))))

(defgeneric remove-quads (instans quads)
  (:method ((this instans) quads)
    (loop for (s p o g) in quads do (rete-remove this s p o g))))

(defgeneric add-quads-from-file (instans quads-file)
  (:method ((this instans) quads-file)
    (assert "Not implemented yet")))

(defgeneric execute-rules (instans)
  (:method ((this instans))
    (let* ((policy (instans-execution-policy this))
	   (queue (instans-rule-instance-queue this)))
      (case policy
	(:first
	 (rule-instance-queue-execute-first queue))
	(:snapshot
	 (rule-instance-queue-execute-snapshot queue))
	(:repeat-first
	 (loop while (rule-instance-queue-execute-first queue)))
	(:repeat-snapshot
	 (loop while (rule-instance-queue-execute-snapshot queue)))
	(t (error* "Unknown execution policy ~A" policy))))))

(defgeneric execute-system (instans)
  (:method ((this instans))
    (initialize-execution this)
    (let ((input-function (instans-input-function this))
	  (input-function-arguments (instans-input-function-arguments this)))
      (loop for input = (apply input-function input-function-arguments)
	    while input
	    do (incf (instans-input-count this))
	    do (let ((op (if (member (car input) '(:add :remove :add-exec-remove)) (pop input) :add)))
		 (case op
		   (:add
		    (loop for (s p o g) in input do (rete-add this s p o g))
		    (execute-rules this))
		   (:remove
		    (loop for (s p o g) in input do (rete-remove this s p o g))
		    (execute-rules this))
		   (:execute
		    (loop for (s p o g) in input do (rete-add this s p o g))
		    (execute-rules this)
		    (loop for (s p o g) in input do (rete-remove this s p o g)))
		   (t
		    (error* "Illegal op ~S" op))))))))

;; (defgeneric group-add-token (group aggr-join token)
;;   (:method ((this group) (aggr-join aggregate-join-node) token)
;;     (loop with prev-values = (group-aggr-values this)
;; 	  for prev-value = (pop prev-values)
;; 	  for (output-var input-var op scalars) in (aggregate-join-var-aggr-list aggr-join)
;; 	  collect output-var into output-vars
;; 	  collect (case op
;; 		    (sum (+ (or prev-value 0) (token-value aggr-join token input-var)))
;; 		    (min (if (null prev-value) (token-value aggr-join token input-var)
;; 			     (min prev-value (token-value aggr-join token input-var))))
;; 		    (max (if (null prev-value) (token-value aggr-join token input-var)
;; 			     (max prev-value (token-value aggr-join token input-var))))
;; 		    (sample (token-value aggr-join token input-var))
;; 		    (t (error* "Not implemented yet!")))
;; 	  into new-values
;; 	  finally (return (progn
;; 			    (incf (group-input-token-count this))
;; 			    (setf (group-aggr-values this) new-values)
;; 			    (setf (group-token this) (make-token aggr-join nil output-vars new-values))))))) ; returns updated group-token

;; (defgeneric group-remove-token (group aggr-join token)
;;   (:method ((this group) (aggr-join aggregate-join-node) token)
;;     (cond ((zerop (decf (group-input-token-count this)))
;; 	   (setf (group-aggr-values this) nil)
;; 	   (setf (group-token this) nil)) ; returns nil
;; 	  (t
;; 	   (loop with prev-values = (group-aggr-values this)
;; 		 for prev-value = (pop prev-values)
;; 		 for (output-var input-var op scalars) in (aggregate-join-var-aggr-list aggr-join)
;; 		 collect output-var into output-vars
;; 		 collect (case op
;; 			   (sum (- prev-value (token-value aggr-join token input-var)))
;; 			   (min (if (null prev-value) (token-value aggr-join token input-var)
;; 				    (min prev-value (token-value aggr-join token input-var))))
;; 			   (max (if (null prev-value) (token-value aggr-join token input-var)
;; 				    (max prev-value (token-value aggr-join token input-var))))
;; 			   (sample (token-value aggr-join token input-var))
;; 			   (t (error* "Not implemented yet!")))
;; 		 into new-values
;; 		 finally (return (progn 
;; 				   (setf (group-aggr-values this) new-values)
;; 				   (setf (group-token this) (make-token aggr-join nil output-vars new-values))))))))) ; returns updated group-token

;; (defgeneric initialize-node (node new-nodes)
;;   ;;; Memory just creates store
;;   (:method ((this existence-start-node) new-nodes)
;;     ;;; An EQL hashtable, since we are using integers as keys!
;;     (setf (memory-store this) (make-hash-table))
;;     (when (null (node-prev this))
;;       (let* ((active-p-var (existence-active-p-var this))
;; 	     (counter-var (existence-counter-var this))
;; 	     (initial-token (make-token this (make-singleton-token) (list active-p-var counter-var) (list nil 0)))) ;;; Node is inactive; zero hits
;; 	(add-token this initial-token))))
;;   (:method ((this memory) new-nodes)
;;     ;;; An EQL hashtable, since we are using integers as keys!
;;     (setf (memory-store this) (make-hash-table))
;;     (when (null (node-prev this))
;;       (add-token this (make-singleton-token))))
;;   ;;; Join creates indices for alpha/beta memories only if the alpha and beta parents share common variables, i.e., (not (null node-use this))
;;   (:method ((this join-node) new-nodes)
;;     (let ((beta-key (node-use this))
;; 	  (alpha-key (node-def-preceq (join-alpha this)))
;; 	  (beta-memory (join-beta this))
;; 	  (alpha-memory (join-alpha this)))
;;       (setf (join-has-dummy-beta-p this) nil)
;;       (cond ((null (node-prev beta-memory))
;; 	     (setf (join-has-dummy-beta-p this) t))
;; 	    ((node-use this)
;; 	     (setf (join-beta-index this) (make-instance 'hash-token-index :key beta-key :id (format nil "beta-index ~A" (node-number this))))
;; 	     (when (not (member beta-memory new-nodes))
;; 	       (loop for beta-token in (store-tokens beta-memory)
;; 		     for key = (join-beta-key this beta-token)
;; 		     do (index-put-token (join-beta-index this) key beta-token)))
;; 	     (setf (join-alpha-index this) (make-instance 'hash-token-index :key alpha-key :id (format nil "beta-alpha ~A" (node-number this))))
;; 	     (when (not (member alpha-memory new-nodes))
;; 	       (loop for alpha-token in (store-tokens alpha-memory)
;; 		     for key = (join-alpha-key this alpha-token)
;; 		     do (index-put-token (join-alpha-index this) key alpha-token)))))))
;;   (:method ((this aggregate-join-node) new-nodes)
;;     (setf (aggregate-join-groups this) (make-instance 'group)))
;;   (:method ((this solution-modifiers-node) new-nodes)
;;     (when (solution-modifiers-distinct-p this)
;;       (setf (solution-modifiers-project-index this) (make-instance 'hash-token-index :key (solution-modifiers-project-vars this) :id (format nil "solution-modifiers-project-index ~A" (node-number this))))))
;;   (:method ((this node) new-nodes) this))
;; (defun initialize-new-nodes (instans new-nodes)
;;   (loop for node in new-nodes do (initialize-node node new-nodes))
;;   (when (instans-active-p instans)
;;     (let ((dominators (dominator-nodes new-nodes)))
;;       (loop for dominator in dominators
;; 	    do (initialize-new-node-tokens instans dominator))))
;;   instans)

;; ;;; Union?
;; (defgeneric initialize-new-node-tokens (instans node &optional stack)
;;   (:method ((instans instans) (node triple-pattern-node) &optional stack)
;;     (assert (null stack))
;;     (let ((quad-store (instans-quad-store instans)))
;;       (when quad-store
;; 	(error* "Quad store not implemented yet"))))
;;   (:method ((instans instans) (join join-node) &optional stack)
;;     (let* ((alpha-memory (join-alpha join))
;; 	   (beta-memory (join-beta join)))
;;       (cond ((< (store-count beta-memory) (store-count alpha-memory))
;; 	     (loop for beta-token in (store-tokens beta-memory)
;; 		   do (add-beta-token join beta-token stack)))
;; 	    (t
;; 	     (loop for alpha-token in (store-tokens alpha-memory)
;; 		   do (add-alpha-token join alpha-token stack))))))
;;   ;;; does this handle correctly new nodes with a beta-memory predecessor not in new nodes?
;;   (:method ((instans instans) (betamem beta-memory) &optional stack)
;;     (cond ((null stack)
;; 	   (when (node-prev betamem)
;; 	     (initialize-new-node-tokens instans (node-prev betamem) (cons betamem stack))))
;; 	  (t
;; 	   (loop for beta-token in (store-tokens betamem)
;; 		 when (join-node-p (car stack))
;; 		 do (add-beta-token (car stack) beta-token (cdr stack))
;; 		 else
;; 		 do (add-token (car stack) beta-token (cdr stack))))))
;;   (:method ((instans instans) (node node) &optional stack)
;;     (when (node-prev node)
;;       (initialize-new-node-tokens instans (node-prev node) (cons node stack)))))

;; (defgeneric initial-data-ops (instans)
;;   (:method ((this instans))
;;     (flet ((doit (op data)
;; 	     (inform "doit ~A ~A" op data)
;; 	     (loop with func = (case op (INSERT-DATA #'rete-add) (DELETE-DATA #'rete-remove) (t (error* "Unknown init op ~A" op)))
;; 		for item in data
;; 		do (case (car item)
;; 		     (GRAPH (loop for triple in (rest (third item)) do (funcall func this (first triple) (second triple) (third triple) (second item))))
;; 		     (BGP (loop for triple in (rest item) do (funcall func this (first triple) (second triple) (third triple) nil)))
;; 		     (t (error* "Malformed item ~A in data op" item))))))
;;       (loop for op in (instans-initial-data-ops this)
;; 	 do (inform "initial-op ~A" op)
;; 	 do (case (car op)
;; 	      ((INSERT-DATA DELETE-DATA)
;; 	       (doit (first op) (second op))))))))

;; (defgeneric process-triples (query-input-processor triples)
;;   (:method ((this query-input-processor) triples)
;;     (process-query-input (query-input-processor-instans this) triples :graph (query-input-processor-graph this) :ops (query-input-processor-operations this))))

