PREFIX dawgt: <http://www.w3.org/2001/sw/DataAccess/tests/test-dawg#>
PREFIX ent: <http://www.w3.org/ns/entailment/>
PREFIX mf: <http://www.w3.org/2001/sw/DataAccess/tests/test-manifest#>
PREFIX mfx: <http://jena.hpl.hp.com/2005/05/test-manifest-extra#>
PREFIX pr: <http://www.w3.org/ns/owl-profile/>
PREFIX qt: <http://www.w3.org/2001/sw/DataAccess/tests/test-query#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX sd: <http://www.w3.org/ns/sparql-service-description#>
PREFIX sparql: <http://www.w3.org/ns/sparql#>
PREFIX ut: <http://www.w3.org/2009/sparql/tests/test-update#>

# @SyntaxTest
SELECT ?type ?suite ?collection ?name ?queryfile ?datafile ?graphfiles ?graphlabels ?resultfile ?resultgraphfiles ?resultgraphlabels ?updateresult ?queryserviceendpoint ?queryservicedata ?entailmentprofile ?entailmentregime WHERE {
       ?test rdf:type ?type
       FILTER(?type = mf:NegativeSyntaxTest
           || ?type = mf:NegativeSyntaxTest11
           || ?type = mf:NegativeUpdateSyntaxTest11
           || ?type = mf:PositiveSyntaxTest
           || ?type = mf:PositiveSyntaxTest11
           || ?type = mf:PositiveUpdateSyntaxTest11)

       ?test mf:action ?queryfile1
       FILTER(!isblank(?queryfile1))

       BIND(strbefore(strafter(str(<>), "tests/"), "/") AS ?suite)
       BIND(strbefore(strafter(strafter(str(<>), "tests/"), "/"),"/") AS ?collection)
       BIND(strafter(str(?test), "#") AS ?name)
       BIND(str(<>) AS ?base)
       BIND(strafter(str(?queryfile1), ?base) AS ?queryfile)
};

# @QueryEvaluationTest
SELECT ?type ?suite ?collection ?name ?queryfile ?datafile ?graphfiles ?graphlabels ?resultfile ?resultgraphfiles ?resultgraphlabels ?updateresult ?queryserviceendpoint ?queryservicedata ?entailmentprofile ?entailmentregime WHERE {
       ?test rdf:type ?type
       FILTER(?type = mf:QueryEvaluationTest)

       ?test mf:action ?a .
       ?a qt:query ?queryfile1
       OPTIONAL { ?a qt:data ?datafile1 }
       OPTIONAL { ?a qt:graphData ?graphfiles1 }
       OPTIONAL { ?test mf:result ?resultfile1 FILTER(!isblank(?resultfile1)) }

       BIND(strbefore(strafter(str(<>), "tests/"), "/") AS ?suite)
       BIND(strbefore(strafter(strafter(str(<>), "tests/"), "/"),"/") AS ?collection)
       BIND(strafter(str(?test), "#") AS ?name)
       BIND(str(<>) AS ?base)
       BIND(strafter(str(?queryfile1), ?base) AS ?queryfile)
       BIND(strafter(str(?datafile1),?base) AS ?datafile)
       BIND(strafter(str(?graphfiles1),?base) AS ?graphfiles)
       BIND(strafter(str(?resultfile1),?base) AS ?resultfile)
};

# @UpdateEvaluationTest
SELECT ?type ?suite ?collection ?name ?queryfile ?datafile ?graphfiles ?graphlabels ?resultfile ?resultgraphfiles ?resultgraphlabels ?updateresult ?queryserviceendpoint ?queryservicedata ?entailmentprofile ?entailmentregime WHERE {
       ?test rdf:type ?type
       FILTER(?type = mf:UpdateEvaluationTest)

       ?test mf:action ?a .
       ?a ut:request ?queryfile1
       OPTIONAL { ?a ut:data ?datafile1 }
       OPTIONAL { ?a ut:graphData [ ut:graph ?graphfiles1 ; rdfs:label ?graphlabels ] }
       ?test mf:result ?r1 .
       FILTER(isblank(?r1))
       OPTIONAL { ?r1 ut:data ?resultfile2 }
       OPTIONAL { ?r1 ut:graphData [ ut:graph ?resultgraphfiles1; rdfs:label ?resultgraphlabels ] }
       OPTIONAL { ?r1 ut:result ?updateresult }
       BIND(strbefore(strafter(str(<>), "tests/"), "/") AS ?suite)
       BIND(strbefore(strafter(strafter(str(<>), "tests/"), "/"),"/") AS ?collection)
       BIND(strafter(str(?test), "#") AS ?name)
       BIND(str(<>) AS ?base)

       BIND(strafter(str(?queryfile1), ?base) AS ?queryfile)
       BIND(strafter(str(?datafile1),?base) AS ?datafile)
       BIND(strafter(str(?graphfiles1),?base) AS ?graphfiles)
       BIND(strafter(str(?resultfile1),?base) AS ?resultfile)
       BIND(strafter(str(?resultgraphfiles1),?base) AS ?resultgraphfiles)
};

# @CSVResultFormatTest
SELECT ?type ?suite ?collection ?name ?queryfile ?datafile ?graphfiles ?graphlabels ?resultfile ?resultgraphfiles ?resultgraphlabels ?updateresult ?queryserviceendpoint ?queryservicedata ?entailmentprofile ?entailmentregime WHERE {
       ?test rdf:type ?type
       FILTER(?type = mf:CSVResultFormatTest)

       ?test mf:action ?a .
       ?a qt:query ?queryfile1
       OPTIONAL { ?a qt:data ?datafile1 }
       OPTIONAL { ?test mf:result ?resultfile1 FILTER(!isblank(?resultfile1)) }

       BIND(strbefore(strafter(str(<>), "tests/"), "/") AS ?suite)
       BIND(strbefore(strafter(strafter(str(<>), "tests/"), "/"),"/") AS ?collection)
       BIND(strafter(str(?test), "#") AS ?name)
       BIND(str(<>) AS ?base)
       BIND(strafter(str(?queryfile1), ?base) AS ?queryfile)
       BIND(strafter(str(?datafile1),?base) AS ?datafile)
       BIND(strafter(str(?resultfile1),?base) AS ?resultfile)
};

# @ProtocolTest
SELECT ?type ?suite ?collection ?name ?queryfile ?datafile ?graphfiles ?graphlabels ?resultfile ?resultgraphfiles ?resultgraphlabels ?updateresult ?queryserviceendpoint ?queryservicedata ?entailmentprofile ?entailmentregime WHERE {
       ?test rdf:type ?type
       FILTER(?type = mf:ProtocolTest)
       BIND(strbefore(strafter(str(<>), "tests/"), "/") AS ?suite)
       BIND(strbefore(strafter(strafter(str(<>), "tests/"), "/"),"/") AS ?collection)
       BIND(strafter(str(?test), "#") AS ?name)
       BIND(str(<>) AS ?base)
};

# @ServiceDescriptionTest
SELECT ?type ?suite ?collection ?name ?queryfile ?datafile ?graphfiles ?graphlabels ?resultfile ?resultgraphfiles ?resultgraphlabels ?updateresult ?queryserviceendpoint ?queryservicedata ?entailmentprofile ?entailmentregime WHERE {
       ?test rdf:type ?type
       FILTER(?type = mf:ServiceDescriptionTest)
       BIND(strbefore(strafter(str(<>), "tests/"), "/") AS ?suite)
       BIND(strbefore(strafter(strafter(str(<>), "tests/"), "/"),"/") AS ?collection)
       BIND(strafter(str(?test), "#") AS ?name)
       BIND(str(<>) AS ?base)
};


# SELECT ?type ?suite ?collection ?name ?queryfile ?datafile ?graphfiles ?graphlabels ?resultfile ?resultgraphfiles ?resultgraphlabels ?updateresult ?queryserviceendpoint ?queryservicedata ?entailmentprofile ?entailmentregime WHERE {
#        { SELECT * { ?test rdf:type ?type
#        	 	    FILTER(?type = mf:CSVResultFormatTest
# 			|| ?type = mf:NegativeSyntaxTest
# 			|| ?type = mf:NegativeSyntaxTest11
# 			|| ?type = mf:NegativeUpdateSyntaxTest11
# 			|| ?type = mf:PositiveSyntaxTest
# 			|| ?type = mf:PositiveSyntaxTest11
# 			|| ?type = mf:PositiveUpdateSyntaxTest11
# 			|| ?type = mf:ProtocolTest
# 			|| ?type = mf:QueryEvaluationTest
# 			|| ?type = mf:ServiceDescriptionTest
# 			|| ?type = mf:UpdateEvaluationTest)
# 			}}
#        BIND(strbefore(strafter(str(<>), "tests/"), "/") AS ?suite)
#        BIND(strbefore(strafter(strafter(str(<>), "tests/"), "/"),"/") AS ?collection)
#        BIND(strafter(str(?test), "#") AS ?name)
#        BIND(str(<>) AS ?base)
#        OPTIONAL { ?test mf:action ?queryfile1 FILTER(!isblank(?queryfile1)) }
#        OPTIONAL { ?test mf:action ?a .
#                   ?a qt:query ?queryfile2
# 	          OPTIONAL { ?a qt:data ?datafile1 }
# 	          OPTIONAL { ?a qt:graphData ?graphfiles1 }
#        }
#        OPTIONAL { ?test mf:action ?b .
#                   ?b ut:request ?queryfile3
#        	          OPTIONAL { ?b ut:data ?datafile2 }
# 		  OPTIONAL { ?b ut:graphData [ ut:graph ?graphfiles2 ; rdfs:label ?graphlabels ] }}
#        BIND(strafter(str(coalesce(?queryfile1, ?queryfile2, ?queryfile3)),?base) AS ?queryfile)
#        BIND(strafter(str(coalesce(?datafile1, ?datafile2)),?base) AS ?datafile)
#        BIND(strafter(str(coalesce(?graphfiles1, ?graphfiles2)),?base) AS ?graphfiles)
#        OPTIONAL { ?test mf:result ?resultfile1 FILTER(!isblank(?resultfile1)) }
#        OPTIONAL { ?test mf:result ?r1 .
#                   FILTER(isblank(?r1))
#                   OPTIONAL { ?r1 ut:data ?resultfile2 }
# 		  OPTIONAL { ?r1 ut:graphData [ ut:graph ?resultgraphfiles1; rdfs:label ?resultgraphlabels ] }
# 		  OPTIONAL { ?r1 ut:result ?updateresult }
# 		  OPTIONAL { ?r1 qt:serviceData [ qt:endpoint ?queryserviceendpoint ; qt:data ?queryservicedata ] }
# 		  OPTIONAL { ?r1 sd:EntailmentProfile ?entailmentprofile }
# 		  OPTIONAL { ?r1 sd:entailmentRegime ?entailmentregime }
#        }
#        BIND(strafter(str(coalesce(?resultfile1, ?resultfile2)),?base) AS ?resultfile)
#        BIND(strafter(str(coalesce(?resultgraphfiles1)),?base) AS ?resultgraphfiles)
# }
