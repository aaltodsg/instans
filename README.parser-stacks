Removing unnecessary adding of stuff into parser stack and result stack. The following files are affected:

(./TODO-stack)
(./src/cl-ll1/datastruct.lisp)
(./src/cl-ll1/debug.lisp)
./src/cl-ll1/ebnf2ll1.lisp
./src/cl-ll1/generator.lisp
./src/cl-ll1/printing.lisp
./src/cl-ll1/with-ll1-parser.lisp
./src/instans.asd
./src/main/compile-sparql-file.lisp
./src/main/main.lisp
./src/parser/sparql-parser.lisp
./src/parser/trig-parser.lisp

================
From TODO-stack:

- Implement NO-RESULT, which avoids pushing the production into the the stack
- Trying to find out, why stack grows in trig parsing
  + Is it a problem of LL-parsing?
    * For example the following grammar
      1: A -> B A
      2: B -> c
    + Does parsing cccccccccc produce a stack containing ten incarnations of rule 1?
      * Yes, the executed actions are there if any.
    + Should not push actions with no results, to avoid growing stack.
  + Trying to get the parser printed
+ Detecting, why trig-parser makes result-stack grow unnecessarily
  + Tracked down the problem to prog1, which does not handle multiple values like progn
  * Trying to detect the production that causes this:
    * executing prefixid adds a nil into result stack, though the RESULT operation has (values) as its last operation.
    * where is result-func* fields of a production set, and where is result-func compiled?
      * trying to print the actual situation of production 37 (prefixid), does it have a result-func?
================

Eliminating unnecessary stuff from result stack:
+ Replace prog1 by multiple-value-prog1 in

Eliminating unnecessary stuff from parse stack:
- Add a field to grammar that tells if we want to ignore unnecessary results.
- Add a table for grammar symbol, which tells if the result of that symbol is needed in parsing
- After expansing the grammar, propagate the information on whether the result of a production is used and based on this, set the ignore-result-p fields of productions.
  - If the result form contains variable $i, mark for the i'th RHS grammar symbol that its result is needed.
  - Mark all productions for nonterminals, whose results are needed.
- During parsing, don't put onto control stack those non-terminals, whose results are not needed.
- What about actions with side effects only?
  - Add a keyword :ACTION that can be used instead of :RESULT, which overrides the propagation above and marks that the operation should be done no matter what.
