;;; -*- Mode: Lisp; Syntax: COMMON-LISP; Base: 10; Package: INSTANS -*-
;;;
;;; Author: Esko Nuutila (esko.nuutila@aalto.fi)
;;;

(in-package #:instans)

(defgeneric store-count (token-store)
  (:method ((this token-store))
    (let ((store (token-store-hash-table this)))
      (cond ((null store) 0)
	    (t (hash-table-count (token-store-hash-table this)))))))

(defgeneric inner-token (token-store token)
  (:method ((this existence-start-node) token) (cdddr token))
  (:method ((this filter-with-previous-value) token) (cddr token))
  (:method ((this token-store) token) token))

(defgeneric store-get-token (token-store token)
  (:method ((this token-store) token)
    (let* ((key (second (car token)))
	   (stored-token (gethash key (token-store-hash-table this)))
	   (stored-token-inner (when-checkit (inner-token this stored-token)))
	   )
      (declare (ignorable stored-token-inner))
      (checkit (numberp key) "key ~S not a number" key)
      (checkit (or (null stored-token) (token-equal token stored-token-inner)) "token~%~A and inner-token~%~A not equal~%~A" token stored-token-inner stored-token)
      stored-token)))

(defgeneric store-put-token (token-store token)
  (:method ((this token-store) token)
    (let ((key (second (car token)))
	  (count (when-checkit (store-count this))))
      (declare (ignorable count))
      (checkit (numberp key) "key ~S not a number" key)
      (checkit (not (gethash key (token-store-hash-table this))) "token ~S already in token-store ~S" token this)
      (setf (gethash key (token-store-hash-table this)) token)
      (checkit (= (1+ count) (store-count this)) "store-put-token did not increase the element count")
      (incf (token-store-put-count this)))))

(defgeneric store-remove-token (token-store token)
  (:method ((this token-store) token)
    (let ((key (second (car token)))
	  (count (when-checkit (store-count this))))
      (declare (ignorable count))
      (checkit (numberp key) "key ~S not a number" key)
      (checkit (gethash key (token-store-hash-table this)) "token ~S not in token-store ~S" token this)
      (remhash key (token-store-hash-table this))
      (checkit (= (1- count) (store-count this)) "store-remove-token did not decrease the element count")
      (incf (token-store-remove-count this)))))

(defgeneric store-tokens (token-store)
  (:method ((token-store token-store))
    (maph #'(lambda (k v)
	      (declare (ignore k))
	      v)
	  (token-store-hash-table token-store))))

(defgeneric store-clear (token-store)
  (:method ((token-store token-store))
    (let ((table (token-store-hash-table token-store)))
      (unless (null table)
	(clrhash table)))))
