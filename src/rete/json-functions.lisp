;;; -*- Mode: Lisp -*-

(in-package #:instans)

;; (defun sparql-query-results-to-json (instans query-results &key (stream *standard-output*) &allow-other-keys)
;;   (declare (ignorable instans))
;;   (flet ((sparql-var-json-name (var)
;; 	   (let ((name (string-downcase (string (uniquely-named-object-name var)))))
;; 	     (if (or (char= (char name 0) #\?) (char= (char name 0) #\$)) (subseq name 1) name))))
;;     (yason:with-output (stream)
;;       (yason:with-object ()
;; 	(yason:with-object-element ("head")
;; 	  (yason:with-object ()
;; 	    (yason:with-object-element ("vars")
;; 	      (yason:with-array ()
;; 		(loop for var in (sparql-query-results-variables query-results)
;; 		      do (yason:encode-array-element (sparql-var-json-name var)))))))
;; 	(cond ((slot-boundp query-results 'results)
;; 	       (yason:with-object-element ("results")
;; 		 (yason:with-object ()
;; 		   (yason:with-object-element ("bindings")
;; 		     (yason:with-array ()
;; 		       (loop for result in (sparql-query-results-results query-results)
;; 			     do ;(yason:encode-array-element
;; 				 (yason:with-object ()
;; 				   (loop for binding in (sparql-result-bindings result)
;; ;					 do (yason:with-object-element ("test")
;; 					 do (yason:with-object-element ((sparql-var-json-name (sparql-binding-variable binding)))
;; 					      (let ((value (sparql-binding-value binding)))
;; 						(cond ((rdf-iri-p value)
;; 						       (yason:with-object ()
;; 							 (yason:encode-object-element "type" "uri")
;; 							 (yason:encode-object-element "value" (rdf-iri-string value))))
;; 						      ((rdf-literal-p value)
;; 						       (cond ((rdf-literal-lang value)
;; 							      (yason:with-object ()
;; 								(yason:encode-object-element "type" "literal")
;; 								(yason:encode-object-element "xml:lang" (rdf-literal-lang value))
;; 								(yason:encode-object-element "value" (rdf-literal-string value))))
;; 							     ((rdf-literal-type value)
;; 							      (yason:with-object ()
;; 								(yason:encode-object-element "type" "literal")
;; 								(yason:encode-object-element "datatype" (rdf-iri-string (rdf-literal-type value)))
;; 								(yason:encode-object-element "value" (rdf-literal-string value))))
;; 							     (t
;; 							      (yason:with-object ()
;; 								(yason:encode-object-element "type" "literal")
;; 								(yason:encode-object-element "value" (rdf-literal-string value))))))
;; 						      ((rdf-blank-node-p value)
;; 						       (yason:with-object ()
;; 							 (yason:encode-object-element "type" "bnode")
;; 							 (yason:encode-object-element "value" (uniquely-named-object-name value))))
;; 						      ((typep value 'xsd-boolean-value)
;; 						       (yason:with-object ()
;; 							 (yason:encode-object-element "type" "literal")
;; 							 (yason:encode-object-element "datatype" *xsd-boolean-iri-string*)
;; 							 (yason:encode-object-element "value" (if value "true" "false"))))
;; 						      ((typep value 'xsd-integer-value)
;; 						       (yason:with-object ()
;; 							 (yason:encode-object-element "type" "literal")
;; 							 (yason:encode-object-element "datatype" *xsd-integer-iri-string*)
;; 							 (yason:encode-object-element "value" (format nil "~D" value))))
;; 						      ((typep value 'xsd-decimal-value)
;; 						       (yason:with-object ()
;; 							 (yason:encode-object-element "type" "literal")
;; 							 (yason:encode-object-element "datatype" *xsd-decimal-iri-string*)
;; 							 (yason:encode-object-element "value" (format nil "~F" value))))
;; 						      ;; ((typep value 'xsd-float-value)
;; 						      ;;  (yason:with-object ()
;; 						      ;; 	 (yason:encode-object-element "type" "literal")
;; 						      ;; 	 (yason:encode-object-element "datatype" *xsd-float-iri-string*)
;; 						      ;; 	 (yason:encode-object-element "value" (format nil "~G" value))))
;; 						      ((typep value 'xsd-double-value)
;; 						       (yason:with-object ()
;; 							 (yason:encode-object-element "type" "literal")
;; 							 (yason:encode-object-element "datatype" *xsd-double-iri-string*)
;; 							 (yason:encode-object-element "value" (format nil "~G" value))))
;; 						      ((typep value 'xsd-string-value)
;; 						       (yason:with-object ()
;; 							 (yason:encode-object-element "type" "literal")
;; 							 (yason:encode-object-element "datatype" *xsd-string-iri-string*)
;; 							 (yason:encode-object-element "value" (format nil "~A" value))))
;; 						      ((typep value 'xsd-datetime-value)
;; 						       (yason:with-object ()
;; 							 (yason:encode-object-element "type" "literal")
;; 							 (yason:encode-object-element "datatype" *xsd-datetime-iri-string*)
;; 							 (yason:encode-object-element "value" (datetime-canonic-string value))))
;; 						      (t (error* "Cannot handle value ~S" value))
;; 						       )
;; 						))))))))))
;; 	      ((slot-boundp query-results 'boolean)
;; 	       (yason:encode-object-element "boolean" (if (sparql-query-results-boolean query-results) "true" "false"))))))))
